// CAUTION: Generated by yy - DO NOT EDIT.

// Copyright 2016 The GC Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package gc

import (
	"fmt"
)

func ExampleArgument() {
	fmt.Println(exampleAST(2, "package a ; 'b' ( 'c' )"))
	// Output:
	// &gc.Argument{
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example2.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleArgument_case1() {
	fmt.Println(exampleAST(3, "package a ; 'b' ( chan c )"))
	// Output:
	// &gc.Argument{
	// · Case: 1,
	// · TypeLiteral: &gc.TypeLiteral{
	// · · Case: 2,
	// · · ChanType: &gc.ChanType{
	// · · · Token: example3.go:1:19: CHAN,
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example3.go:1:24: IDENTIFIER "c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleArgumentList() {
	fmt.Println(exampleAST(4, "package a ; 'b' ( 'c' )"))
	// Output:
	// &gc.ArgumentList{
	// · Argument: &gc.Argument{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example4.go:1:19: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleArgumentList_case1() {
	fmt.Println(exampleAST(5, "package a ; 'b' ( 'c' , 'd' )"))
	// Output:
	// &gc.ArgumentList{
	// · Argument: &gc.Argument{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example5.go:1:19: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ArgumentList: &gc.ArgumentList{
	// · · Argument: &gc.Argument{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'd',
	// · · · · · · · · Token: example5.go:1:25: CHAR_LIT "'d'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Case: 1,
	// · · Token: example5.go:1:23: ',',
	// · },
	// }
}

func ExampleArrayType() {
	fmt.Println(exampleAST(6, "package a ; [ ... ] b ("))
	// Output:
	// &gc.ArrayType{
	// · Token: example6.go:1:13: '[',
	// · Token2: example6.go:1:15: DDD,
	// · Token3: example6.go:1:19: ']',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example6.go:1:21: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleArrayType_case1() {
	fmt.Println(exampleAST(7, "package a ; [ 'b' ] c ("))
	// Output:
	// &gc.ArrayType{
	// · Case: 1,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example7.go:1:15: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example7.go:1:13: '[',
	// · Token2: example7.go:1:19: ']',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example7.go:1:21: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleAssignment() {
	fmt.Println(exampleAST(8, "package a ; 'b' = 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example8.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example8.go:1:19: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example8.go:1:17: '=',
	// }
}

func ExampleAssignment_case01() {
	fmt.Println(exampleAST(9, "package a ; 'b' += 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 1,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example9.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example9.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example9.go:1:17: ADD_ASSIGN,
	// }
}

func ExampleAssignment_case02() {
	fmt.Println(exampleAST(10, "package a ; 'b' &^= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 2,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example10.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example10.go:1:21: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example10.go:1:17: ANDNOT_ASSIGN,
	// }
}

func ExampleAssignment_case03() {
	fmt.Println(exampleAST(11, "package a ; 'b' &= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 3,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example11.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example11.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example11.go:1:17: AND_ASSIGN,
	// }
}

func ExampleAssignment_case04() {
	fmt.Println(exampleAST(12, "package a ; 'b' /= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 4,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example12.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example12.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example12.go:1:17: DIV_ASSIGN,
	// }
}

func ExampleAssignment_case05() {
	fmt.Println(exampleAST(13, "package a ; 'b' <<= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 5,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example13.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example13.go:1:21: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example13.go:1:17: LSH_ASSIGN,
	// }
}

func ExampleAssignment_case06() {
	fmt.Println(exampleAST(14, "package a ; 'b' %= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 6,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example14.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example14.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example14.go:1:17: MOD_ASSIGN,
	// }
}

func ExampleAssignment_case07() {
	fmt.Println(exampleAST(15, "package a ; 'b' *= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 7,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example15.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example15.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example15.go:1:17: MUL_ASSIGN,
	// }
}

func ExampleAssignment_case08() {
	fmt.Println(exampleAST(16, "package a ; 'b' |= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 8,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example16.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example16.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example16.go:1:17: OR_ASSIGN,
	// }
}

func ExampleAssignment_case09() {
	fmt.Println(exampleAST(17, "package a ; 'b' >>= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 9,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example17.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example17.go:1:21: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example17.go:1:17: RSH_ASSIGN,
	// }
}

func ExampleAssignment_case10() {
	fmt.Println(exampleAST(18, "package a ; 'b' -= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 10,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example18.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example18.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example18.go:1:17: SUB_ASSIGN,
	// }
}

func ExampleAssignment_case11() {
	fmt.Println(exampleAST(19, "package a ; 'b' ^= 'c' ;"))
	// Output:
	// &gc.Assignment{
	// · Case: 11,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example19.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example19.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example19.go:1:17: XOR_ASSIGN,
	// }
}

func ExampleBasicLiteral() {
	fmt.Println(exampleAST(20, "package a ; 'b' %"))
	// Output:
	// &gc.BasicLiteral{
	// · Value: 'b',
	// · Token: example20.go:1:13: CHAR_LIT "'b'",
	// }
}

func ExampleBasicLiteral_case1() {
	fmt.Println(exampleAST(21, "package a ; 1.98 %"))
	// Output:
	// &gc.BasicLiteral{
	// · Value: 1.98,
	// · Case: 1,
	// · Token: example21.go:1:13: FLOAT_LIT "1.98",
	// }
}

func ExampleBasicLiteral_case2() {
	fmt.Println(exampleAST(22, "package a ; 98i %"))
	// Output:
	// &gc.BasicLiteral{
	// · Value: (0+98i),
	// · Case: 2,
	// · Token: example22.go:1:13: IMAG_LIT "98i",
	// }
}

func ExampleBasicLiteral_case3() {
	fmt.Println(exampleAST(23, "package a ; 98 %"))
	// Output:
	// &gc.BasicLiteral{
	// · Value: 98,
	// · Case: 3,
	// · Token: example23.go:1:13: INT_LIT "98",
	// }
}

func ExampleBasicLiteral_case4() {
	fmt.Println(exampleAST(24, "package a ; \"b\" %"))
	// Output:
	// &gc.BasicLiteral{
	// · Value: "b",
	// · Case: 4,
	// · Token: example24.go:1:13: STRING_LIT "\"b\"",
	// }
}

func ExampleBlock() {
	fmt.Println(exampleAST(26, "package a ; b : { } ;"))
	// Output:
	// &gc.Block{
	// · Token: example26.go:1:17: '{',
	// · Token2: example26.go:1:19: '}',
	// }
}

func ExampleBody() {
	fmt.Println(exampleAST(28, "package a ; if { } ;"))
	// Output:
	// &gc.Body{
	// · Token: example28.go:1:16: '{',
	// · Token2: example28.go:1:18: '}',
	// }
}

func ExampleCall() {
	fmt.Println(exampleAST(29, "package a ; 'b' ( ) %"))
	// Output:
	// &gc.Call{
	// · Token: example29.go:1:17: '(',
	// · Token2: example29.go:1:19: ')',
	// }
}

func ExampleCall_case1() {
	fmt.Println(exampleAST(30, "package a ; 'b' ( 'c' ) %"))
	// Output:
	// &gc.Call{
	// · ArgumentList: &gc.ArgumentList{
	// · · Argument: &gc.Argument{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'c',
	// · · · · · · · · Token: example30.go:1:19: CHAR_LIT "'c'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Case: 1,
	// · Token: example30.go:1:17: '(',
	// · Token2: example30.go:1:23: ')',
	// }
}

func ExampleCall_case2() {
	fmt.Println(exampleAST(31, "package a ; 'b' ( 'c' ... ) %"))
	// Output:
	// &gc.Call{
	// · ArgumentList: &gc.ArgumentList{
	// · · Argument: &gc.Argument{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'c',
	// · · · · · · · · Token: example31.go:1:19: CHAR_LIT "'c'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Case: 2,
	// · Token: example31.go:1:17: '(',
	// · Token2: example31.go:1:23: DDD,
	// · Token3: example31.go:1:27: ')',
	// }
}

func ExampleChanType() {
	fmt.Println(exampleAST(32, "package a ; chan b ("))
	// Output:
	// &gc.ChanType{
	// · Token: example32.go:1:13: CHAN,
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example32.go:1:18: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleChanType_case1() {
	fmt.Println(exampleAST(33, "package a ; chan <- b ("))
	// Output:
	// &gc.ChanType{
	// · Case: 1,
	// · Token: example33.go:1:13: CHAN,
	// · Token2: example33.go:1:18: TXCHAN,
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example33.go:1:21: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleChanType_case2() {
	fmt.Println(exampleAST(34, "package a ; <- chan b ("))
	// Output:
	// &gc.ChanType{
	// · Case: 2,
	// · Token: example34.go:1:13: RXCHAN,
	// · Token2: example34.go:1:16: CHAN,
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example34.go:1:21: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleCommaOpt() {
	fmt.Println(exampleAST(35, "package a ; func ( b )") == (*CommaOpt)(nil))
	// Output:
	// true
}

func ExampleCommaOpt_case1() {
	fmt.Println(exampleAST(36, "package a ; func ( b , )"))
	// Output:
	// &gc.CommaOpt{
	// · Token: example36.go:1:22: ',',
	// }
}

func ExampleCompLitItem() {
	fmt.Println(exampleAST(37, "package a ; 'b' { { } ,"))
	// Output:
	// &gc.CompLitItem{
	// · CompLitValue: &gc.CompLitValue{
	// · · Token: example37.go:1:19: '{',
	// · · Token2: example37.go:1:21: '}',
	// · },
	// }
}

func ExampleCompLitItem_case1() {
	fmt.Println(exampleAST(38, "package a ; 'b' { { } : { } ,"))
	// Output:
	// &gc.CompLitItem{
	// · Case: 1,
	// · CompLitValue: &gc.CompLitValue{
	// · · Token: example38.go:1:19: '{',
	// · · Token2: example38.go:1:21: '}',
	// · },
	// · CompLitValue2: &gc.CompLitValue{
	// · · Token: example38.go:1:25: '{',
	// · · Token2: example38.go:1:27: '}',
	// · },
	// · Token: example38.go:1:23: ':',
	// }
}

func ExampleCompLitItem_case2() {
	fmt.Println(exampleAST(39, "package a ; 'b' { { } : 'c' ,"))
	// Output:
	// &gc.CompLitItem{
	// · Case: 2,
	// · CompLitValue: &gc.CompLitValue{
	// · · Token: example39.go:1:19: '{',
	// · · Token2: example39.go:1:21: '}',
	// · },
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example39.go:1:25: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example39.go:1:23: ':',
	// }
}

func ExampleCompLitItem_case3() {
	fmt.Println(exampleAST(40, "package a ; 'b' { 'c' ,"))
	// Output:
	// &gc.CompLitItem{
	// · Case: 3,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example40.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleCompLitItem_case4() {
	fmt.Println(exampleAST(41, "package a ; 'b' { 'c' : { } ,"))
	// Output:
	// &gc.CompLitItem{
	// · Case: 4,
	// · CompLitValue: &gc.CompLitValue{
	// · · Token: example41.go:1:25: '{',
	// · · Token2: example41.go:1:27: '}',
	// · },
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example41.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example41.go:1:23: ':',
	// }
}

func ExampleCompLitItem_case5() {
	fmt.Println(exampleAST(42, "package a ; 'b' { 'c' : 'd' ,"))
	// Output:
	// &gc.CompLitItem{
	// · Case: 5,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example42.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'd',
	// · · · · · · Token: example42.go:1:25: CHAR_LIT "'d'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example42.go:1:23: ':',
	// }
}

func ExampleCompLitItemList() {
	fmt.Println(exampleAST(43, "package a ; 'b' { 'c' ,"))
	// Output:
	// &gc.CompLitItemList{
	// · CompLitItem: &gc.CompLitItem{
	// · · Case: 3,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example43.go:1:19: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleCompLitItemList_case1() {
	fmt.Println(exampleAST(44, "package a ; 'b' { 'c' , 'd' ,"))
	// Output:
	// &gc.CompLitItemList{
	// · CompLitItem: &gc.CompLitItem{
	// · · Case: 3,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example44.go:1:19: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · CompLitItemList: &gc.CompLitItemList{
	// · · Case: 1,
	// · · CompLitItem: &gc.CompLitItem{
	// · · · Case: 3,
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'd',
	// · · · · · · · · Token: example44.go:1:25: CHAR_LIT "'d'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example44.go:1:23: ',',
	// · },
	// }
}

func ExampleCompLitType() {
	fmt.Println(exampleAST(45, "package a ; [ 'b' ] c {"))
	// Output:
	// &gc.CompLitType{
	// · ArrayType: &gc.ArrayType{
	// · · Case: 1,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example45.go:1:15: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example45.go:1:13: '[',
	// · · Token2: example45.go:1:19: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example45.go:1:21: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleCompLitType_case1() {
	fmt.Println(exampleAST(46, "package a ; map [ b ] c {"))
	// Output:
	// &gc.CompLitType{
	// · Case: 1,
	// · MapType: &gc.MapType{
	// · · Token: example46.go:1:13: MAP,
	// · · Token2: example46.go:1:17: '[',
	// · · Token3: example46.go:1:21: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example46.go:1:19: IDENTIFIER "b",
	// · · · },
	// · · },
	// · · Typ2: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example46.go:1:23: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleCompLitType_case2() {
	fmt.Println(exampleAST(47, "package a ; [ ] b {"))
	// Output:
	// &gc.CompLitType{
	// · Case: 2,
	// · SliceType: &gc.SliceType{
	// · · Token: example47.go:1:13: '[',
	// · · Token2: example47.go:1:15: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example47.go:1:17: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleCompLitType_case3() {
	fmt.Println(exampleAST(48, "package a ; struct { } {"))
	// Output:
	// &gc.CompLitType{
	// · Case: 3,
	// · StructType: &gc.StructType{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example48.go:1:20: '{',
	// · · },
	// · · Token: example48.go:1:13: STRUCT,
	// · · Token2: example48.go:1:22: '}',
	// · },
	// }
}

func ExampleCompLitValue() {
	fmt.Println(exampleAST(49, "package a ; 'b' { } %"))
	// Output:
	// &gc.CompLitValue{
	// · Token: example49.go:1:17: '{',
	// · Token2: example49.go:1:19: '}',
	// }
}

func ExampleCompLitValue_case1() {
	fmt.Println(exampleAST(50, "package a ; 'b' { 'c' } %"))
	// Output:
	// &gc.CompLitValue{
	// · Case: 1,
	// · CompLitItemList: &gc.CompLitItemList{
	// · · CompLitItem: &gc.CompLitItem{
	// · · · Case: 3,
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'c',
	// · · · · · · · · Token: example50.go:1:19: CHAR_LIT "'c'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example50.go:1:17: '{',
	// · Token2: example50.go:1:23: '}',
	// }
}

func ExampleConstDecl() {
	fmt.Println(exampleAST(51, "package a ; const ( ) ;"))
	// Output:
	// &gc.ConstDecl{
	// · Token: example51.go:1:13: CONST,
	// · Token2: example51.go:1:19: '(',
	// · Token3: example51.go:1:21: ')',
	// }
}

func ExampleConstDecl_case1() {
	fmt.Println(exampleAST(52, "package a ; const ( b ) ;"))
	// Output:
	// &gc.ConstDecl{
	// · Case: 1,
	// · ConstSpecList: &gc.ConstSpecList{
	// · · ConstSpec: &gc.ConstSpec{
	// · · · IdentifierList: &gc.IdentifierList{
	// · · · · Token: example52.go:1:21: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// · Token: example52.go:1:13: CONST,
	// · Token2: example52.go:1:19: '(',
	// · Token3: example52.go:1:23: ')',
	// }
}

func ExampleConstDecl_case2() {
	fmt.Println(exampleAST(53, "package a ; const b ;"))
	// Output:
	// &gc.ConstDecl{
	// · Case: 2,
	// · ConstSpec: &gc.ConstSpec{
	// · · IdentifierList: &gc.IdentifierList{
	// · · · Token: example53.go:1:19: IDENTIFIER "b",
	// · · },
	// · },
	// · Token: example53.go:1:13: CONST,
	// }
}

func ExampleConstSpec() {
	fmt.Println(exampleAST(54, "package a ; const b )"))
	// Output:
	// &gc.ConstSpec{
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example54.go:1:19: IDENTIFIER "b",
	// · },
	// }
}

func ExampleConstSpec_case1() {
	fmt.Println(exampleAST(55, "package a ; const b = 'c' )"))
	// Output:
	// &gc.ConstSpec{
	// · Case: 1,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example55.go:1:23: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example55.go:1:19: IDENTIFIER "b",
	// · },
	// · Token: example55.go:1:21: '=',
	// }
}

func ExampleConstSpec_case2() {
	fmt.Println(exampleAST(56, "package a ; const b c = 'd' )"))
	// Output:
	// &gc.ConstSpec{
	// · Case: 2,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'd',
	// · · · · · · · Token: example56.go:1:25: CHAR_LIT "'d'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example56.go:1:19: IDENTIFIER "b",
	// · },
	// · Token: example56.go:1:23: '=',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example56.go:1:21: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleConstSpecList() {
	fmt.Println(exampleAST(57, "package a ; const ( b )"))
	// Output:
	// &gc.ConstSpecList{
	// · ConstSpec: &gc.ConstSpec{
	// · · IdentifierList: &gc.IdentifierList{
	// · · · Token: example57.go:1:21: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleConstSpecList_case1() {
	fmt.Println(exampleAST(58, "package a ; const ( b ; c )"))
	// Output:
	// &gc.ConstSpecList{
	// · ConstSpec: &gc.ConstSpec{
	// · · IdentifierList: &gc.IdentifierList{
	// · · · Token: example58.go:1:21: IDENTIFIER "b",
	// · · },
	// · },
	// · ConstSpecList: &gc.ConstSpecList{
	// · · Case: 1,
	// · · ConstSpec: &gc.ConstSpec{
	// · · · IdentifierList: &gc.IdentifierList{
	// · · · · Token: example58.go:1:25: IDENTIFIER "c",
	// · · · },
	// · · },
	// · · Token: example58.go:1:23: ';',
	// · },
	// }
}

func ExampleElif() {
	fmt.Println(exampleAST(59, "package a ; if { } else if { } ;"))
	// Output:
	// &gc.Elif{
	// · Body: &gc.Body{
	// · · Token: example59.go:1:28: '{',
	// · · Token2: example59.go:1:30: '}',
	// · },
	// · Token: example59.go:1:20: ELSE,
	// · Token2: example59.go:1:25: IF,
	// }
}

func ExampleElifList() {
	fmt.Println(exampleAST(60, "package a ; if { } ;") == (*ElifList)(nil))
	// Output:
	// true
}

func ExampleElifList_case1() {
	fmt.Println(exampleAST(61, "package a ; if { } else if { } ;"))
	// Output:
	// &gc.ElifList{
	// · Elif: &gc.Elif{
	// · · Body: &gc.Body{
	// · · · Token: example61.go:1:28: '{',
	// · · · Token2: example61.go:1:30: '}',
	// · · },
	// · · Token: example61.go:1:20: ELSE,
	// · · Token2: example61.go:1:25: IF,
	// · },
	// }
}

func ExampleElseOpt() {
	fmt.Println(exampleAST(62, "package a ; if { } ;") == (*ElseOpt)(nil))
	// Output:
	// true
}

func ExampleElseOpt_case1() {
	fmt.Println(exampleAST(63, "package a ; if { } else { } ;"))
	// Output:
	// &gc.ElseOpt{
	// · Block: &gc.Block{
	// · · Token: example63.go:1:25: '{',
	// · · Token2: example63.go:1:27: '}',
	// · },
	// · Token: example63.go:1:20: ELSE,
	// }
}

func ExampleExpression() {
	fmt.Println(exampleAST(64, "package a ; 'b' %"))
	// Output:
	// &gc.Expression{
	// · UnaryExpression: &gc.UnaryExpression{
	// · · Case: 7,
	// · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · Operand: &gc.Operand{
	// · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · Value: 'b',
	// · · · · · Token: example64.go:1:13: CHAR_LIT "'b'",
	// · · · · },
	// · · · · Case: 2,
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpression_case01() {
	fmt.Println(exampleAST(65, "package a ; 'b' % 'c' %"))
	// Output:
	// &gc.Expression{
	// · Case: 1,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example65.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example65.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example65.go:1:17: '%',
	// }
}

func ExampleExpression_case02() {
	fmt.Println(exampleAST(66, "package a ; 'b' & 'c' %"))
	// Output:
	// &gc.Expression{
	// · Case: 2,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example66.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example66.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example66.go:1:17: '&',
	// }
}

func ExampleExpression_case03() {
	fmt.Println(exampleAST(67, "package a ; 'b' * 'c' %"))
	// Output:
	// &gc.Expression{
	// · Case: 3,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example67.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example67.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example67.go:1:17: '*',
	// }
}

func ExampleExpression_case04() {
	fmt.Println(exampleAST(68, "package a ; 'b' + 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 4,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example68.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example68.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example68.go:1:17: '+',
	// }
}

func ExampleExpression_case05() {
	fmt.Println(exampleAST(69, "package a ; 'b' - 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 5,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example69.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example69.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example69.go:1:17: '-',
	// }
}

func ExampleExpression_case06() {
	fmt.Println(exampleAST(70, "package a ; 'b' / 'c' %"))
	// Output:
	// &gc.Expression{
	// · Case: 6,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example70.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example70.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example70.go:1:17: '/',
	// }
}

func ExampleExpression_case07() {
	fmt.Println(exampleAST(71, "package a ; 'b' < 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 7,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example71.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example71.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example71.go:1:17: '<',
	// }
}

func ExampleExpression_case08() {
	fmt.Println(exampleAST(72, "package a ; 'b' > 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 8,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example72.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example72.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example72.go:1:17: '>',
	// }
}

func ExampleExpression_case09() {
	fmt.Println(exampleAST(73, "package a ; 'b' ^ 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 9,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example73.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example73.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example73.go:1:17: '^',
	// }
}

func ExampleExpression_case10() {
	fmt.Println(exampleAST(74, "package a ; 'b' | 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 10,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example74.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example74.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example74.go:1:17: '|',
	// }
}

func ExampleExpression_case11() {
	fmt.Println(exampleAST(75, "package a ; 'b' && 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 11,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example75.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example75.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example75.go:1:17: ANDAND,
	// }
}

func ExampleExpression_case12() {
	fmt.Println(exampleAST(76, "package a ; 'b' &^ 'c' %"))
	// Output:
	// &gc.Expression{
	// · Case: 12,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example76.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example76.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example76.go:1:17: ANDNOT,
	// }
}

func ExampleExpression_case13() {
	fmt.Println(exampleAST(77, "package a ; 'b' == 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 13,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example77.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example77.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example77.go:1:17: EQ,
	// }
}

func ExampleExpression_case14() {
	fmt.Println(exampleAST(78, "package a ; 'b' >= 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 14,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example78.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example78.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example78.go:1:17: GEQ,
	// }
}

func ExampleExpression_case15() {
	fmt.Println(exampleAST(79, "package a ; 'b' <= 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 15,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example79.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example79.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example79.go:1:17: LEQ,
	// }
}

func ExampleExpression_case16() {
	fmt.Println(exampleAST(80, "package a ; 'b' << 'c' %"))
	// Output:
	// &gc.Expression{
	// · Case: 16,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example80.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example80.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example80.go:1:17: LSH,
	// }
}

func ExampleExpression_case17() {
	fmt.Println(exampleAST(81, "package a ; 'b' != 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 17,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example81.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example81.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example81.go:1:17: NEQ,
	// }
}

func ExampleExpression_case18() {
	fmt.Println(exampleAST(82, "package a ; 'b' || 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 18,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example82.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example82.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example82.go:1:17: OROR,
	// }
}

func ExampleExpression_case19() {
	fmt.Println(exampleAST(83, "package a ; 'b' >> 'c' %"))
	// Output:
	// &gc.Expression{
	// · Case: 19,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example83.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example83.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example83.go:1:17: RSH,
	// }
}

func ExampleExpression_case20() {
	fmt.Println(exampleAST(84, "package a ; 'b' <- 'c' )"))
	// Output:
	// &gc.Expression{
	// · Case: 20,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example84.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example84.go:1:20: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example84.go:1:17: COMM,
	// }
}

func ExampleExpressionList() {
	fmt.Println(exampleAST(87, "package a ; 'b' ,"))
	// Output:
	// &gc.ExpressionList{
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example87.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpressionList_case1() {
	fmt.Println(exampleAST(88, "package a ; 'b' , 'c' )"))
	// Output:
	// &gc.ExpressionList{
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example88.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList: &gc.ExpressionList{
	// · · Case: 1,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example88.go:1:19: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example88.go:1:17: ',',
	// · },
	// }
}

func ExampleExpressionListOpt() {
	fmt.Println(exampleAST(89, "package a ; return ;") == (*ExpressionListOpt)(nil))
	// Output:
	// true
}

func ExampleExpressionListOpt_case1() {
	fmt.Println(exampleAST(90, "package a ; return 'b' ;"))
	// Output:
	// &gc.ExpressionListOpt{
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example90.go:1:20: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpressionOpt() {
	fmt.Println(exampleAST(85, "package a ; 'b' [ :") == (*ExpressionOpt)(nil))
	// Output:
	// true
}

func ExampleExpressionOpt_case1() {
	fmt.Println(exampleAST(86, "package a ; 'b' [ 'c' :"))
	// Output:
	// &gc.ExpressionOpt{
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example86.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleFile() {
	fmt.Println(exampleAST(1, "package a ;"))
	// Output:
	// &gc.File{
	// · Scope: &gc.Scope{
	// · · Kind: FileScope,
	// · · Parent: &gc.Scope{
	// · · · Kind: PackageScope,
	// · · · Parent: &gc.Scope{
	// · · · · Bindings: gc.Bindings{
	// · · · · · "append": *gc.FuncDeclaration,
	// · · · · · "bool": *gc.TypeDeclaration,
	// · · · · · "byte": *gc.TypeDeclaration,
	// · · · · · "cap": *gc.FuncDeclaration,
	// · · · · · "close": *gc.FuncDeclaration,
	// · · · · · "complex": *gc.FuncDeclaration,
	// · · · · · "complex128": *gc.TypeDeclaration,
	// · · · · · "complex64": *gc.TypeDeclaration,
	// · · · · · "copy": *gc.FuncDeclaration,
	// · · · · · "delete": *gc.FuncDeclaration,
	// · · · · · "error": *gc.TypeDeclaration,
	// · · · · · "false": *gc.ConstDeclaration,
	// · · · · · "float32": *gc.TypeDeclaration,
	// · · · · · "float64": *gc.TypeDeclaration,
	// · · · · · "imag": *gc.FuncDeclaration,
	// · · · · · "int": *gc.TypeDeclaration,
	// · · · · · "int16": *gc.TypeDeclaration,
	// · · · · · "int32": *gc.TypeDeclaration,
	// · · · · · "int64": *gc.TypeDeclaration,
	// · · · · · "int8": *gc.TypeDeclaration,
	// · · · · · "iota": *gc.ConstDeclaration,
	// · · · · · "len": *gc.FuncDeclaration,
	// · · · · · "make": *gc.FuncDeclaration,
	// · · · · · "new": *gc.FuncDeclaration,
	// · · · · · "nil": *gc.VarDeclaration,
	// · · · · · "panic": *gc.FuncDeclaration,
	// · · · · · "print": *gc.FuncDeclaration,
	// · · · · · "println": *gc.FuncDeclaration,
	// · · · · · "real": *gc.FuncDeclaration,
	// · · · · · "recover": *gc.FuncDeclaration,
	// · · · · · "rune": *gc.TypeDeclaration,
	// · · · · · "string": *gc.TypeDeclaration,
	// · · · · · "true": *gc.ConstDeclaration,
	// · · · · · "uint": *gc.TypeDeclaration,
	// · · · · · "uint16": *gc.TypeDeclaration,
	// · · · · · "uint32": *gc.TypeDeclaration,
	// · · · · · "uint64": *gc.TypeDeclaration,
	// · · · · · "uint8": *gc.TypeDeclaration,
	// · · · · · "uintptr": *gc.TypeDeclaration,
	// · · · · },
	// · · · · Kind: UniverseScope,
	// · · · },
	// · · },
	// · },
	// · Path: "example1.go",
	// · Prologue: &gc.Prologue{
	// · · PackageClause: &gc.PackageClause{
	// · · · Token: example1.go:1:1: PACKAGE,
	// · · · Token2: example1.go:1:9: IDENTIFIER "a",
	// · · · Token3: example1.go:1:11: ';',
	// · · },
	// · },
	// }
}

func ExampleForHeader() {
	fmt.Println(exampleAST(91, "package a ; for range 'b' {"))
	// Output:
	// &gc.ForHeader{
	// · Range: &gc.Range{
	// · · Case: 2,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example91.go:1:23: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example91.go:1:17: RANGE,
	// · },
	// }
}

func ExampleForHeader_case1() {
	fmt.Println(exampleAST(92, "package a ; for ; ; {"))
	// Output:
	// &gc.ForHeader{
	// · Case: 1,
	// · Token: example92.go:1:17: ';',
	// · Token2: example92.go:1:19: ';',
	// }
}

func ExampleForHeader_case2() {
	fmt.Println(exampleAST(93, "package a ; for {"))
	// Output:
	// &gc.ForHeader{
	// · Case: 2,
	// }
}

func ExampleForStatement() {
	fmt.Println(exampleAST(94, "package a ; for { } ;"))
	// Output:
	// &gc.ForStatement{
	// · Body: &gc.Body{
	// · · Token: example94.go:1:17: '{',
	// · · Token2: example94.go:1:19: '}',
	// · },
	// · ForHeader: &gc.ForHeader{
	// · · Case: 2,
	// · },
	// · Token: example94.go:1:13: FOR,
	// }
}

func ExampleFuncBodyOpt() {
	fmt.Println(exampleAST(95, "package a ; func b ( ) ;") == (*FuncBodyOpt)(nil))
	// Output:
	// true
}

func ExampleFuncBodyOpt_case1() {
	fmt.Println(exampleAST(96, "package a ; func b ( ) { } ;"))
	// Output:
	// &gc.FuncBodyOpt{
	// · Block: &gc.Block{
	// · · Token: example96.go:1:24: '{',
	// · · Token2: example96.go:1:26: '}',
	// · },
	// }
}

func ExampleFuncDecl() {
	fmt.Println(exampleAST(98, "package a ; func b ( ) ;"))
	// Output:
	// &gc.FuncDecl{
	// · Signature: &gc.Signature{
	// · · Parameters: &gc.Parameters{
	// · · · Token: example98.go:1:20: '(',
	// · · · Token2: example98.go:1:22: ')',
	// · · },
	// · },
	// · Token: example98.go:1:13: FUNC,
	// · Token2: example98.go:1:18: IDENTIFIER "b",
	// }
}

func ExampleFuncType() {
	fmt.Println(exampleAST(99, "package a ; var b func()"))
	// Output:
	// &gc.FuncType{
	// · Signature: &gc.Signature{
	// · · Parameters: &gc.Parameters{
	// · · · Token: example99.go:1:23: '(',
	// · · · Token2: example99.go:1:24: ')',
	// · · },
	// · },
	// · Token: example99.go:1:19: FUNC,
	// }
}

func ExampleFuncType_case1() {
	fmt.Println(exampleAST(100, "package a ; var b func « b » ( )"))
	// Output:
	// &gc.FuncType{
	// · Case: 1,
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example100.go:1:27: IDENTIFIER "b",
	// · },
	// · Signature: &gc.Signature{
	// · · Parameters: &gc.Parameters{
	// · · · Token: example100.go:1:32: '(',
	// · · · Token2: example100.go:1:34: ')',
	// · · },
	// · },
	// · Token: example100.go:1:19: FUNC,
	// · Token2: example100.go:1:24: LTLT,
	// · Token3: example100.go:1:29: GTGT,
	// }
}

func ExampleGenericArgumentsOpt() {
	fmt.Println(exampleAST(101, "package a ; b %") == (*GenericArgumentsOpt)(nil))
	// Output:
	// true
}

func ExampleGenericArgumentsOpt_case1() {
	fmt.Println(exampleAST(102, "package a ; b « c » %"))
	// Output:
	// &gc.GenericArgumentsOpt{
	// · Token: example102.go:1:15: LTLT,
	// · Token2: example102.go:1:20: GTGT,
	// · TypeList: &gc.TypeList{
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example102.go:1:18: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleGenericParametersOpt() {
	fmt.Println(exampleAST(103, "package a ; type b (") == (*GenericParametersOpt)(nil))
	// Output:
	// true
}

func ExampleGenericParametersOpt_case1() {
	fmt.Println(exampleAST(104, "package a ; type b « c » ("))
	// Output:
	// &gc.GenericParametersOpt{
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example104.go:1:23: IDENTIFIER "c",
	// · },
	// · Token: example104.go:1:20: LTLT,
	// · Token2: example104.go:1:25: GTGT,
	// }
}

func ExampleIdentifierList() {
	fmt.Println(exampleAST(107, "package a ; var b ("))
	// Output:
	// &gc.IdentifierList{
	// · Token: example107.go:1:17: IDENTIFIER "b",
	// }
}

func ExampleIdentifierList_case1() {
	fmt.Println(exampleAST(108, "package a ; var b , c ("))
	// Output:
	// &gc.IdentifierList{
	// · IdentifierList: &gc.IdentifierList{
	// · · Case: 1,
	// · · Token: example108.go:1:19: ',',
	// · · Token2: example108.go:1:21: IDENTIFIER "c",
	// · },
	// · Token: example108.go:1:17: IDENTIFIER "b",
	// }
}

func ExampleIdentifierOpt() {
	fmt.Println(exampleAST(105, "package a ; import 'b'") == (*IdentifierOpt)(nil))
	// Output:
	// true
}

func ExampleIdentifierOpt_case1() {
	fmt.Println(exampleAST(106, "package a ; import b ;"))
	// Output:
	// &gc.IdentifierOpt{
	// · Token: example106.go:1:20: IDENTIFIER "b",
	// }
}

func ExampleIfHeader() {
	fmt.Println(exampleAST(109, "package a ; if b {"))
	// Output:
	// &gc.IfHeader{
	// · SimpleStatementOpt: &gc.SimpleStatementOpt{
	// · · SimpleStatement: &gc.SimpleStatement{
	// · · · Case: 1,
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · Case: 4,
	// · · · · · · · Token: example109.go:1:16: IDENTIFIER "b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleIfHeader_case1() {
	fmt.Println(exampleAST(110, "package a ; if ; {"))
	// Output:
	// &gc.IfHeader{
	// · Case: 1,
	// · Token: example110.go:1:16: ';',
	// }
}

func ExampleIfStatement() {
	fmt.Println(exampleAST(111, "package a ; if { } ;"))
	// Output:
	// &gc.IfStatement{
	// · Body: &gc.Body{
	// · · Token: example111.go:1:16: '{',
	// · · Token2: example111.go:1:18: '}',
	// · },
	// · Token: example111.go:1:13: IF,
	// }
}

func ExampleImportDecl() {
	fmt.Println(exampleAST(112, "package a ; import ( ) ;"))
	// Output:
	// &gc.ImportDecl{
	// · Token: example112.go:1:13: IMPORT,
	// · Token2: example112.go:1:20: '(',
	// · Token3: example112.go:1:22: ')',
	// }
}

func ExampleImportDecl_case1() {
	fmt.Println(exampleAST(113, "package a ; import ( 'b' ) ;"))
	// Output:
	// &gc.ImportDecl{
	// · Case: 1,
	// · ImportSpecList: &gc.ImportSpecList{
	// · · ImportSpec: &gc.ImportSpec{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example113.go:1:22: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 1,
	// · · },
	// · },
	// · Token: example113.go:1:13: IMPORT,
	// · Token2: example113.go:1:20: '(',
	// · Token3: example113.go:1:26: ')',
	// }
}

func ExampleImportDecl_case2() {
	fmt.Println(exampleAST(114, "package a ; import 'b' ;"))
	// Output:
	// &gc.ImportDecl{
	// · Case: 2,
	// · ImportSpec: &gc.ImportSpec{
	// · · BasicLiteral: &gc.BasicLiteral{
	// · · · Value: 'b',
	// · · · Token: example114.go:1:20: CHAR_LIT "'b'",
	// · · },
	// · · Case: 1,
	// · },
	// · Token: example114.go:1:13: IMPORT,
	// }
}

func ExampleImportList() {
	fmt.Println(exampleAST(121, "package a ;") == (*ImportList)(nil))
	// Output:
	// true
}

func ExampleImportList_case1() {
	fmt.Println(exampleAST(122, "package a ; import 'b' ;"))
	// Output:
	// &gc.ImportList{
	// · ImportDecl: &gc.ImportDecl{
	// · · Case: 2,
	// · · ImportSpec: &gc.ImportSpec{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example122.go:1:20: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 1,
	// · · },
	// · · Token: example122.go:1:13: IMPORT,
	// · },
	// · Token: example122.go:1:24: ';',
	// }
}

func ExampleImportSpec() {
	fmt.Println(exampleAST(115, "package a ; import . 'b' )"))
	// Output:
	// &gc.ImportSpec{
	// · BasicLiteral: &gc.BasicLiteral{
	// · · Value: 'b',
	// · · Token: example115.go:1:22: CHAR_LIT "'b'",
	// · },
	// · Token: example115.go:1:20: '.',
	// }
}

func ExampleImportSpec_case1() {
	fmt.Println(exampleAST(116, "package a ; import 'b' )"))
	// Output:
	// &gc.ImportSpec{
	// · BasicLiteral: &gc.BasicLiteral{
	// · · Value: 'b',
	// · · Token: example116.go:1:20: CHAR_LIT "'b'",
	// · },
	// · Case: 1,
	// }
}

func ExampleImportSpecList() {
	fmt.Println(exampleAST(119, "package a ; import ( 'b' )"))
	// Output:
	// &gc.ImportSpecList{
	// · ImportSpec: &gc.ImportSpec{
	// · · BasicLiteral: &gc.BasicLiteral{
	// · · · Value: 'b',
	// · · · Token: example119.go:1:22: CHAR_LIT "'b'",
	// · · },
	// · · Case: 1,
	// · },
	// }
}

func ExampleImportSpecList_case1() {
	fmt.Println(exampleAST(120, "package a ; import ( 'b' ; 'c' )"))
	// Output:
	// &gc.ImportSpecList{
	// · ImportSpec: &gc.ImportSpec{
	// · · BasicLiteral: &gc.BasicLiteral{
	// · · · Value: 'b',
	// · · · Token: example120.go:1:22: CHAR_LIT "'b'",
	// · · },
	// · · Case: 1,
	// · },
	// · ImportSpecList: &gc.ImportSpecList{
	// · · Case: 1,
	// · · ImportSpec: &gc.ImportSpec{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'c',
	// · · · · Token: example120.go:1:28: CHAR_LIT "'c'",
	// · · · },
	// · · · Case: 1,
	// · · },
	// · · Token: example120.go:1:26: ';',
	// · },
	// }
}

func ExampleInterfaceMethodDecl() {
	fmt.Println(exampleAST(127, "package a ; interface { b ( ) ;"))
	// Output:
	// &gc.InterfaceMethodDecl{
	// · Signature: &gc.Signature{
	// · · Parameters: &gc.Parameters{
	// · · · Token: example127.go:1:27: '(',
	// · · · Token2: example127.go:1:29: ')',
	// · · },
	// · },
	// · Token: example127.go:1:25: IDENTIFIER "b",
	// }
}

func ExampleInterfaceMethodDecl_case1() {
	fmt.Println(exampleAST(128, "package a ; interface { b ;"))
	// Output:
	// &gc.InterfaceMethodDecl{
	// · Case: 1,
	// · QualifiedIdent: &gc.QualifiedIdent{
	// · · Token: example128.go:1:25: IDENTIFIER "b",
	// · },
	// }
}

func ExampleInterfaceMethodDeclList() {
	fmt.Println(exampleAST(129, "package a ; interface { b ;"))
	// Output:
	// &gc.InterfaceMethodDeclList{
	// · InterfaceMethodDecl: &gc.InterfaceMethodDecl{
	// · · Case: 1,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example129.go:1:25: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleInterfaceMethodDeclList_case1() {
	fmt.Println(exampleAST(130, "package a ; interface { b ; c ;"))
	// Output:
	// &gc.InterfaceMethodDeclList{
	// · InterfaceMethodDecl: &gc.InterfaceMethodDecl{
	// · · Case: 1,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example130.go:1:25: IDENTIFIER "b",
	// · · },
	// · },
	// · InterfaceMethodDeclList: &gc.InterfaceMethodDeclList{
	// · · Case: 1,
	// · · InterfaceMethodDecl: &gc.InterfaceMethodDecl{
	// · · · Case: 1,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example130.go:1:29: IDENTIFIER "c",
	// · · · },
	// · · },
	// · · Token: example130.go:1:27: ';',
	// · },
	// }
}

func ExampleInterfaceType() {
	fmt.Println(exampleAST(123, "package a ; interface { } ("))
	// Output:
	// &gc.InterfaceType{
	// · LBrace: &gc.LBrace{
	// · · Case: 1,
	// · · Token: example123.go:1:23: '{',
	// · },
	// · Token: example123.go:1:13: INTERFACE,
	// · Token2: example123.go:1:25: '}',
	// }
}

func ExampleInterfaceType_case1() {
	fmt.Println(exampleAST(125, "package a ; interface { b } ("))
	// Output:
	// &gc.InterfaceType{
	// · Case: 1,
	// · InterfaceMethodDeclList: &gc.InterfaceMethodDeclList{
	// · · InterfaceMethodDecl: &gc.InterfaceMethodDecl{
	// · · · Case: 1,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example125.go:1:25: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// · LBrace: &gc.LBrace{
	// · · Case: 1,
	// · · Token: example125.go:1:23: '{',
	// · },
	// · Token: example125.go:1:13: INTERFACE,
	// · Token2: example125.go:1:27: '}',
	// }
}

func ExampleLBrace() {
	fmt.Println(exampleAST(131, "package a ; if interface { !"))
	// Output:
	// &gc.LBrace{
	// · Token: example131.go:1:26: '{',
	// }
}

func ExampleLBrace_case1() {
	fmt.Println(exampleAST(132, "package a ; interface { !"))
	// Output:
	// &gc.LBrace{
	// · Case: 1,
	// · Token: example132.go:1:23: '{',
	// }
}

func ExampleLBraceCompLitItem() {
	fmt.Println(exampleAST(133, "package a ; [ ] b { 'c' ,"))
	// Output:
	// &gc.LBraceCompLitItem{
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example133.go:1:21: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleLBraceCompLitItem_case1() {
	fmt.Println(exampleAST(134, "package a ; [ ] b { 'c' : 'd' ,"))
	// Output:
	// &gc.LBraceCompLitItem{
	// · Case: 1,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example134.go:1:21: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'd',
	// · · · · · · Token: example134.go:1:27: CHAR_LIT "'d'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example134.go:1:25: ':',
	// }
}

func ExampleLBraceCompLitItem_case2() {
	fmt.Println(exampleAST(135, "package a ; [ ] b { 'c' : { } ,"))
	// Output:
	// &gc.LBraceCompLitItem{
	// · Case: 2,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example135.go:1:21: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · LBraceCompLitValue: &gc.LBraceCompLitValue{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example135.go:1:27: '{',
	// · · },
	// · · Token: example135.go:1:29: '}',
	// · },
	// · Token: example135.go:1:25: ':',
	// }
}

func ExampleLBraceCompLitItem_case3() {
	fmt.Println(exampleAST(136, "package a ; [ ] b { { } ,"))
	// Output:
	// &gc.LBraceCompLitItem{
	// · Case: 3,
	// · LBraceCompLitValue: &gc.LBraceCompLitValue{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example136.go:1:21: '{',
	// · · },
	// · · Token: example136.go:1:23: '}',
	// · },
	// }
}

func ExampleLBraceCompLitItem_case4() {
	fmt.Println(exampleAST(137, "package a ; [ ] b { { } : 'c' ,"))
	// Output:
	// &gc.LBraceCompLitItem{
	// · Case: 4,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example137.go:1:27: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · LBraceCompLitValue: &gc.LBraceCompLitValue{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example137.go:1:21: '{',
	// · · },
	// · · Token: example137.go:1:23: '}',
	// · },
	// · Token: example137.go:1:25: ':',
	// }
}

func ExampleLBraceCompLitItem_case5() {
	fmt.Println(exampleAST(138, "package a ; [ ] b { { } : { } ,"))
	// Output:
	// &gc.LBraceCompLitItem{
	// · Case: 5,
	// · LBraceCompLitValue: &gc.LBraceCompLitValue{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example138.go:1:21: '{',
	// · · },
	// · · Token: example138.go:1:23: '}',
	// · },
	// · LBraceCompLitValue2: &gc.LBraceCompLitValue{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example138.go:1:27: '{',
	// · · },
	// · · Token: example138.go:1:29: '}',
	// · },
	// · Token: example138.go:1:25: ':',
	// }
}

func ExampleLBraceCompLitItemList() {
	fmt.Println(exampleAST(139, "package a ; [ ] b { 'c' ,"))
	// Output:
	// &gc.LBraceCompLitItemList{
	// · LBraceCompLitItem: &gc.LBraceCompLitItem{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example139.go:1:21: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleLBraceCompLitItemList_case1() {
	fmt.Println(exampleAST(140, "package a ; [ ] b { 'c' , 'd' ,"))
	// Output:
	// &gc.LBraceCompLitItemList{
	// · LBraceCompLitItem: &gc.LBraceCompLitItem{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example140.go:1:21: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · LBraceCompLitItemList: &gc.LBraceCompLitItemList{
	// · · Case: 1,
	// · · LBraceCompLitItem: &gc.LBraceCompLitItem{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'd',
	// · · · · · · · · Token: example140.go:1:27: CHAR_LIT "'d'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example140.go:1:25: ',',
	// · },
	// }
}

func ExampleLBraceCompLitValue() {
	fmt.Println(exampleAST(141, "package a ; [ ] b { } %"))
	// Output:
	// &gc.LBraceCompLitValue{
	// · LBrace: &gc.LBrace{
	// · · Case: 1,
	// · · Token: example141.go:1:19: '{',
	// · },
	// · Token: example141.go:1:21: '}',
	// }
}

func ExampleLBraceCompLitValue_case1() {
	fmt.Println(exampleAST(142, "package a ; [ ] b { 'c' } %"))
	// Output:
	// &gc.LBraceCompLitValue{
	// · Case: 1,
	// · LBrace: &gc.LBrace{
	// · · Case: 1,
	// · · Token: example142.go:1:19: '{',
	// · },
	// · LBraceCompLitItemList: &gc.LBraceCompLitItemList{
	// · · LBraceCompLitItem: &gc.LBraceCompLitItem{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'c',
	// · · · · · · · · Token: example142.go:1:21: CHAR_LIT "'c'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example142.go:1:25: '}',
	// }
}

func ExampleMapType() {
	fmt.Println(exampleAST(143, "package a ; map [ b ] c ("))
	// Output:
	// &gc.MapType{
	// · Token: example143.go:1:13: MAP,
	// · Token2: example143.go:1:17: '[',
	// · Token3: example143.go:1:21: ']',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example143.go:1:19: IDENTIFIER "b",
	// · · },
	// · },
	// · Typ2: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example143.go:1:23: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleOperand() {
	fmt.Println(exampleAST(144, "package a ; ( 'b' ) %"))
	// Output:
	// &gc.Operand{
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example144.go:1:15: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example144.go:1:13: '(',
	// · Token2: example144.go:1:19: ')',
	// }
}

func ExampleOperand_case1() {
	fmt.Println(exampleAST(145, "package a ; ( chan b ) %"))
	// Output:
	// &gc.Operand{
	// · Case: 1,
	// · Token: example145.go:1:13: '(',
	// · Token2: example145.go:1:22: ')',
	// · TypeLiteral: &gc.TypeLiteral{
	// · · Case: 2,
	// · · ChanType: &gc.ChanType{
	// · · · Token: example145.go:1:15: CHAN,
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example145.go:1:20: IDENTIFIER "b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleOperand_case2() {
	fmt.Println(exampleAST(146, "package a ; 'b' %"))
	// Output:
	// &gc.Operand{
	// · BasicLiteral: &gc.BasicLiteral{
	// · · Value: 'b',
	// · · Token: example146.go:1:13: CHAR_LIT "'b'",
	// · },
	// · Case: 2,
	// }
}

func ExampleOperand_case3() {
	fmt.Println(exampleAST(148, "package a ; func ( ) { } %"))
	// Output:
	// &gc.Operand{
	// · Case: 3,
	// · FuncType: &gc.FuncType{
	// · · Signature: &gc.Signature{
	// · · · Parameters: &gc.Parameters{
	// · · · · Token: example148.go:1:18: '(',
	// · · · · Token2: example148.go:1:20: ')',
	// · · · },
	// · · },
	// · · Token: example148.go:1:13: FUNC,
	// · },
	// · LBrace: &gc.LBrace{
	// · · Case: 1,
	// · · Token: example148.go:1:22: '{',
	// · },
	// · Token: example148.go:1:24: '}',
	// }
}

func ExampleOperand_case4() {
	fmt.Println(exampleAST(149, "package a ; b %"))
	// Output:
	// &gc.Operand{
	// · Case: 4,
	// · Token: example149.go:1:13: IDENTIFIER "b",
	// }
}

func ExamplePackageClause() {
	fmt.Println(exampleAST(150, "package a ;"))
	// Output:
	// &gc.PackageClause{
	// · Token: example150.go:1:1: PACKAGE,
	// · Token2: example150.go:1:9: IDENTIFIER "a",
	// · Token3: example150.go:1:11: ';',
	// }
}

func ExampleParameterDecl() {
	fmt.Println(exampleAST(151, "package a ; func ( ... b )"))
	// Output:
	// &gc.ParameterDecl{
	// · Token: example151.go:1:20: DDD,
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example151.go:1:24: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleParameterDecl_case1() {
	fmt.Println(exampleAST(152, "package a ; func ( b ... c )"))
	// Output:
	// &gc.ParameterDecl{
	// · Case: 1,
	// · Token: example152.go:1:20: IDENTIFIER "b",
	// · Token2: example152.go:1:22: DDD,
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example152.go:1:26: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleParameterDecl_case2() {
	fmt.Println(exampleAST(153, "package a ; func ( b c )"))
	// Output:
	// &gc.ParameterDecl{
	// · Case: 2,
	// · Token: example153.go:1:20: IDENTIFIER "b",
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example153.go:1:22: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleParameterDecl_case3() {
	fmt.Println(exampleAST(154, "package a ; func ( ) ( b ,"))
	// Output:
	// &gc.ParameterDecl{
	// · Case: 3,
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example154.go:1:24: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleParameterDeclList() {
	fmt.Println(exampleAST(155, "package a ; func ( b )"))
	// Output:
	// &gc.ParameterDeclList{
	// · ParameterDecl: &gc.ParameterDecl{
	// · · Case: 3,
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example155.go:1:20: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleParameterDeclList_case1() {
	fmt.Println(exampleAST(156, "package a ; func ( b , c )"))
	// Output:
	// &gc.ParameterDeclList{
	// · ParameterDecl: &gc.ParameterDecl{
	// · · Case: 3,
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example156.go:1:20: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// · ParameterDeclList: &gc.ParameterDeclList{
	// · · Case: 1,
	// · · ParameterDecl: &gc.ParameterDecl{
	// · · · Case: 3,
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example156.go:1:24: IDENTIFIER "c",
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example156.go:1:22: ',',
	// · },
	// }
}

func ExampleParameters() {
	fmt.Println(exampleAST(157, "package a ; func ( ) ("))
	// Output:
	// &gc.Parameters{
	// · Token: example157.go:1:18: '(',
	// · Token2: example157.go:1:20: ')',
	// }
}

func ExampleParameters_case1() {
	fmt.Println(exampleAST(158, "package a ; func ( b ) ("))
	// Output:
	// &gc.Parameters{
	// · Case: 1,
	// · ParameterDeclList: &gc.ParameterDeclList{
	// · · ParameterDecl: &gc.ParameterDecl{
	// · · · Case: 3,
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example158.go:1:20: IDENTIFIER "b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example158.go:1:18: '(',
	// · Token2: example158.go:1:22: ')',
	// }
}

func ExamplePrimaryExpression() {
	fmt.Println(exampleAST(159, "package a ; 'b' %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Operand: &gc.Operand{
	// · · BasicLiteral: &gc.BasicLiteral{
	// · · · Value: 'b',
	// · · · Token: example159.go:1:13: CHAR_LIT "'b'",
	// · · },
	// · · Case: 2,
	// · },
	// }
}

func ExamplePrimaryExpression_case01() {
	fmt.Println(exampleAST(160, "package a ; [ ] b { } %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 1,
	// · CompLitType: &gc.CompLitType{
	// · · Case: 2,
	// · · SliceType: &gc.SliceType{
	// · · · Token: example160.go:1:13: '[',
	// · · · Token2: example160.go:1:15: ']',
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example160.go:1:17: IDENTIFIER "b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · LBraceCompLitValue: &gc.LBraceCompLitValue{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example160.go:1:19: '{',
	// · · },
	// · · Token: example160.go:1:21: '}',
	// · },
	// }
}

func ExamplePrimaryExpression_case02() {
	fmt.Println(exampleAST(161, "package a ; switch ; b := 'c' . ( type ) ("))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 2,
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'c',
	// · · · · Token: example161.go:1:27: CHAR_LIT "'c'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// · Token: example161.go:1:31: '.',
	// · Token2: example161.go:1:33: '(',
	// · Token3: example161.go:1:35: TYPE,
	// · Token4: example161.go:1:40: ')',
	// }
}

func ExamplePrimaryExpression_case03() {
	fmt.Println(exampleAST(162, "package a ; 'b' . ( c ) %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 3,
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example162.go:1:13: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// · Token: example162.go:1:17: '.',
	// · Token2: example162.go:1:19: '(',
	// · Token3: example162.go:1:23: ')',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example162.go:1:21: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExamplePrimaryExpression_case04() {
	fmt.Println(exampleAST(163, "package a ; 'b' . c %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 4,
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example163.go:1:13: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// · Token: example163.go:1:17: '.',
	// · Token2: example163.go:1:19: IDENTIFIER "c",
	// }
}

func ExamplePrimaryExpression_case05() {
	fmt.Println(exampleAST(164, "package a ; 'b' [ 'c' ] %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 5,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example164.go:1:19: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example164.go:1:13: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// · Token: example164.go:1:17: '[',
	// · Token2: example164.go:1:23: ']',
	// }
}

func ExamplePrimaryExpression_case06() {
	fmt.Println(exampleAST(165, "package a ; 'b' [ : : ] %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 6,
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example165.go:1:13: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// · Token: example165.go:1:17: '[',
	// · Token2: example165.go:1:19: ':',
	// · Token3: example165.go:1:21: ':',
	// · Token4: example165.go:1:23: ']',
	// }
}

func ExamplePrimaryExpression_case07() {
	fmt.Println(exampleAST(166, "package a ; 'b' [ : ] %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 7,
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example166.go:1:13: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// · Token: example166.go:1:17: '[',
	// · Token2: example166.go:1:19: ':',
	// · Token3: example166.go:1:21: ']',
	// }
}

func ExamplePrimaryExpression_case08() {
	fmt.Println(exampleAST(167, "package a ; 'b' ( ) %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Call: &gc.Call{
	// · · Token: example167.go:1:17: '(',
	// · · Token2: example167.go:1:19: ')',
	// · },
	// · Case: 8,
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example167.go:1:13: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// }
}

func ExamplePrimaryExpression_case09() {
	fmt.Println(exampleAST(168, "package a ; 'b' { } %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 9,
	// · CompLitValue: &gc.CompLitValue{
	// · · Token: example168.go:1:17: '{',
	// · · Token2: example168.go:1:19: '}',
	// · },
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example168.go:1:13: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// }
}

func ExamplePrimaryExpression_case10() {
	fmt.Println(exampleAST(169, "package a ; chan b ( 'c' ) %"))
	// Output:
	// &gc.PrimaryExpression{
	// · Case: 10,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example169.go:1:22: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example169.go:1:20: '(',
	// · Token2: example169.go:1:26: ')',
	// · TypeLiteral: &gc.TypeLiteral{
	// · · Case: 2,
	// · · ChanType: &gc.ChanType{
	// · · · Token: example169.go:1:13: CHAN,
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example169.go:1:18: IDENTIFIER "b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePrologue() {
	fmt.Println(exampleAST(170, "package a ;"))
	// Output:
	// &gc.Prologue{
	// · PackageClause: &gc.PackageClause{
	// · · Token: example170.go:1:1: PACKAGE,
	// · · Token2: example170.go:1:9: IDENTIFIER "a",
	// · · Token3: example170.go:1:11: ';',
	// · },
	// }
}

func ExampleQualifiedIdent() {
	fmt.Println(exampleAST(171, "package a ; chan b ("))
	// Output:
	// &gc.QualifiedIdent{
	// · Token: example171.go:1:18: IDENTIFIER "b",
	// }
}

func ExampleQualifiedIdent_case1() {
	fmt.Println(exampleAST(172, "package a ; chan b . c ("))
	// Output:
	// &gc.QualifiedIdent{
	// · Case: 1,
	// · Token: example172.go:1:18: IDENTIFIER "b",
	// · Token2: example172.go:1:20: '.',
	// · Token3: example172.go:1:22: IDENTIFIER "c",
	// }
}

func ExampleRange() {
	fmt.Println(exampleAST(173, "package a ; for 'b' = range 'c' {"))
	// Output:
	// &gc.Range{
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example173.go:1:29: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example173.go:1:17: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example173.go:1:21: '=',
	// · Token2: example173.go:1:23: RANGE,
	// }
}

func ExampleRange_case1() {
	fmt.Println(exampleAST(174, "package a ; for 'b' := range 'c' {"))
	// Output:
	// &gc.Range{
	// · Case: 1,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example174.go:1:30: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example174.go:1:17: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example174.go:1:21: COLAS,
	// · Token2: example174.go:1:24: RANGE,
	// }
}

func ExampleRange_case2() {
	fmt.Println(exampleAST(175, "package a ; for range 'b' {"))
	// Output:
	// &gc.Range{
	// · Case: 2,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example175.go:1:23: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example175.go:1:17: RANGE,
	// }
}

func ExampleReceiverOpt() {
	fmt.Println(exampleAST(176, "package a ; func b") == (*ReceiverOpt)(nil))
	// Output:
	// true
}

func ExampleReceiverOpt_case1() {
	fmt.Println(exampleAST(177, "package a ; func ( ) b"))
	// Output:
	// &gc.ReceiverOpt{
	// · Parameters: &gc.Parameters{
	// · · Token: example177.go:1:18: '(',
	// · · Token2: example177.go:1:20: ')',
	// · },
	// }
}

func ExampleResultOpt() {
	fmt.Println(exampleAST(178, "package a ; go func ( ) )") == (*ResultOpt)(nil))
	// Output:
	// true
}

func ExampleResultOpt_case1() {
	fmt.Println(exampleAST(179, "package a ; func ( ) ( ) ("))
	// Output:
	// &gc.ResultOpt{
	// · Case: 1,
	// · Parameters: &gc.Parameters{
	// · · Token: example179.go:1:22: '(',
	// · · Token2: example179.go:1:24: ')',
	// · },
	// }
}

func ExampleResultOpt_case2() {
	fmt.Println(exampleAST(180, "package a ; func ( ) []b ("))
	// Output:
	// &gc.ResultOpt{
	// · Case: 2,
	// · Typ: &gc.Typ{
	// · · Case: 8,
	// · · SliceType: &gc.SliceType{
	// · · · Token: example180.go:1:22: '[',
	// · · · Token2: example180.go:1:23: ']',
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example180.go:1:24: IDENTIFIER "b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSelectStatement() {
	fmt.Println(exampleAST(182, "package a ; select { } ;"))
	// Output:
	// &gc.SelectStatement{
	// · SwitchBody: &gc.SwitchBody{
	// · · Token: example182.go:1:20: '{',
	// · · Token2: example182.go:1:22: '}',
	// · },
	// · Token: example182.go:1:13: SELECT,
	// }
}

func ExampleSemicolonOpt() {
	fmt.Println(exampleAST(183, "package a ; import ( 'b' )") == (*SemicolonOpt)(nil))
	// Output:
	// true
}

func ExampleSemicolonOpt_case1() {
	fmt.Println(exampleAST(184, "package a ; import ( 'b' ; )"))
	// Output:
	// &gc.SemicolonOpt{
	// · Token: example184.go:1:26: ';',
	// }
}

func ExampleSignature() {
	fmt.Println(exampleAST(185, "package a ; var b func ( )"))
	// Output:
	// &gc.Signature{
	// · Parameters: &gc.Parameters{
	// · · Token: example185.go:1:24: '(',
	// · · Token2: example185.go:1:26: ')',
	// · },
	// }
}

func ExampleSimpleStatement() {
	fmt.Println(exampleAST(186, "package a ; 'b' = 'c' ;"))
	// Output:
	// &gc.SimpleStatement{
	// · Assignment: &gc.Assignment{
	// · · ExpressionList: &gc.ExpressionList{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'b',
	// · · · · · · · · Token: example186.go:1:13: CHAR_LIT "'b'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · ExpressionList2: &gc.ExpressionList{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'c',
	// · · · · · · · · Token: example186.go:1:19: CHAR_LIT "'c'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example186.go:1:17: '=',
	// · },
	// }
}

func ExampleSimpleStatement_case1() {
	fmt.Println(exampleAST(187, "package a ; 'b' ;"))
	// Output:
	// &gc.SimpleStatement{
	// · Case: 1,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example187.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSimpleStatement_case2() {
	fmt.Println(exampleAST(188, "package a ; 'b' -- ;"))
	// Output:
	// &gc.SimpleStatement{
	// · Case: 2,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example188.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example188.go:1:17: DEC,
	// }
}

func ExampleSimpleStatement_case3() {
	fmt.Println(exampleAST(189, "package a ; 'b' ++ ;"))
	// Output:
	// &gc.SimpleStatement{
	// · Case: 3,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example189.go:1:13: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example189.go:1:17: INC,
	// }
}

func ExampleSimpleStatement_case4() {
	fmt.Println(exampleAST(190, "package a ; 'b' := 'c' ;"))
	// Output:
	// &gc.SimpleStatement{
	// · Case: 4,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example190.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList2: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example190.go:1:20: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example190.go:1:17: COLAS,
	// }
}

func ExampleSimpleStatementOpt() {
	fmt.Println(exampleAST(191, "package a ; for ;") == (*SimpleStatementOpt)(nil))
	// Output:
	// true
}

func ExampleSimpleStatementOpt_case1() {
	fmt.Println(exampleAST(192, "package a ; if 'b' ;"))
	// Output:
	// &gc.SimpleStatementOpt{
	// · SimpleStatement: &gc.SimpleStatement{
	// · · Case: 1,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example192.go:1:16: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSliceType() {
	fmt.Println(exampleAST(193, "package a ; [ ] b ("))
	// Output:
	// &gc.SliceType{
	// · Token: example193.go:1:13: '[',
	// · Token2: example193.go:1:15: ']',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example193.go:1:17: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleStatement() {
	fmt.Println(exampleAST(194, "package a ; switch { default : ;") == (*Statement)(nil))
	// Output:
	// true
}

func ExampleStatement_case1() {
	fmt.Println(exampleAST(195, "package a ; b : { } ;"))
	// Output:
	// &gc.Statement{
	// · Block: &gc.Block{
	// · · Token: example195.go:1:17: '{',
	// · · Token2: example195.go:1:19: '}',
	// · },
	// · Case: 1,
	// }
}

func ExampleStatement_case2() {
	fmt.Println(exampleAST(196, "package a ; if { const b ;"))
	// Output:
	// &gc.Statement{
	// · Case: 2,
	// · ConstDecl: &gc.ConstDecl{
	// · · Case: 2,
	// · · ConstSpec: &gc.ConstSpec{
	// · · · IdentifierList: &gc.IdentifierList{
	// · · · · Token: example196.go:1:24: IDENTIFIER "b",
	// · · · },
	// · · },
	// · · Token: example196.go:1:18: CONST,
	// · },
	// }
}

func ExampleStatement_case3() {
	fmt.Println(exampleAST(197, "package a ; b : type ( ) ;"))
	// Output:
	// &gc.Statement{
	// · Case: 3,
	// · TypeDecl: &gc.TypeDecl{
	// · · Token: example197.go:1:17: TYPE,
	// · · Token2: example197.go:1:22: '(',
	// · · Token3: example197.go:1:24: ')',
	// · },
	// }
}

func ExampleStatement_case4() {
	fmt.Println(exampleAST(198, "package a ; b : var ( ) ;"))
	// Output:
	// &gc.Statement{
	// · Case: 4,
	// · VarDecl: &gc.VarDecl{
	// · · Token: example198.go:1:17: VAR,
	// · · Token2: example198.go:1:21: '(',
	// · · Token3: example198.go:1:23: ')',
	// · },
	// }
}

func ExampleStatement_case5() {
	fmt.Println(exampleAST(199, "package a ; b : break ;"))
	// Output:
	// &gc.Statement{
	// · Case: 5,
	// · StatementNonDecl: &gc.StatementNonDecl{
	// · · Token: example199.go:1:17: BREAK,
	// · },
	// }
}

func ExampleStatementList() {
	fmt.Println(exampleAST(201, "package a ; if { b ;"))
	// Output:
	// &gc.StatementList{
	// · Statement: &gc.Statement{
	// · · Case: 5,
	// · · StatementNonDecl: &gc.StatementNonDecl{
	// · · · Case: 11,
	// · · · SimpleStatement: &gc.SimpleStatement{
	// · · · · Case: 1,
	// · · · · Expression: &gc.Expression{
	// · · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · · Case: 7,
	// · · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · · Operand: &gc.Operand{
	// · · · · · · · · Case: 4,
	// · · · · · · · · Token: example201.go:1:18: IDENTIFIER "b",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleStatementList_case1() {
	fmt.Println(exampleAST(202, "package a ; if { ; ;"))
	// Output:
	// &gc.StatementList{
	// · StatementList: &gc.StatementList{
	// · · Case: 1,
	// · · Token: example202.go:1:18: ';',
	// · },
	// }
}

func ExampleStatementNonDecl() {
	fmt.Println(exampleAST(203, "package a ; break ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Token: example203.go:1:13: BREAK,
	// }
}

func ExampleStatementNonDecl_case01() {
	fmt.Println(exampleAST(204, "package a ; continue ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 1,
	// · Token: example204.go:1:13: CONTINUE,
	// }
}

func ExampleStatementNonDecl_case02() {
	fmt.Println(exampleAST(205, "package a ; defer 'b' ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 2,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example205.go:1:19: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example205.go:1:13: DEFER,
	// }
}

func ExampleStatementNonDecl_case03() {
	fmt.Println(exampleAST(206, "package a ; fallthrough ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 3,
	// · Token: example206.go:1:13: FALLTHROUGH,
	// }
}

func ExampleStatementNonDecl_case04() {
	fmt.Println(exampleAST(207, "package a ; for { } ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 4,
	// · ForStatement: &gc.ForStatement{
	// · · Body: &gc.Body{
	// · · · Token: example207.go:1:17: '{',
	// · · · Token2: example207.go:1:19: '}',
	// · · },
	// · · ForHeader: &gc.ForHeader{
	// · · · Case: 2,
	// · · },
	// · · Token: example207.go:1:13: FOR,
	// · },
	// }
}

func ExampleStatementNonDecl_case05() {
	fmt.Println(exampleAST(208, "package a ; go 'b' ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 5,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example208.go:1:16: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example208.go:1:13: GO,
	// }
}

func ExampleStatementNonDecl_case06() {
	fmt.Println(exampleAST(209, "package a ; goto b ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 6,
	// · Token: example209.go:1:13: GOTO,
	// · Token2: example209.go:1:18: IDENTIFIER "b",
	// }
}

func ExampleStatementNonDecl_case07() {
	fmt.Println(exampleAST(210, "package a ; b : ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 7,
	// · Token: example210.go:1:13: IDENTIFIER "b",
	// · Token2: example210.go:1:15: ':',
	// }
}

func ExampleStatementNonDecl_case08() {
	fmt.Println(exampleAST(211, "package a ; if { } ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 8,
	// · IfStatement: &gc.IfStatement{
	// · · Body: &gc.Body{
	// · · · Token: example211.go:1:16: '{',
	// · · · Token2: example211.go:1:18: '}',
	// · · },
	// · · Token: example211.go:1:13: IF,
	// · },
	// }
}

func ExampleStatementNonDecl_case09() {
	fmt.Println(exampleAST(212, "package a ; return ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 9,
	// · Token: example212.go:1:13: RETURN,
	// }
}

func ExampleStatementNonDecl_case10() {
	fmt.Println(exampleAST(213, "package a ; select { } ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 10,
	// · SelectStatement: &gc.SelectStatement{
	// · · SwitchBody: &gc.SwitchBody{
	// · · · Token: example213.go:1:20: '{',
	// · · · Token2: example213.go:1:22: '}',
	// · · },
	// · · Token: example213.go:1:13: SELECT,
	// · },
	// }
}

func ExampleStatementNonDecl_case11() {
	fmt.Println(exampleAST(214, "package a ; 'b' ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 11,
	// · SimpleStatement: &gc.SimpleStatement{
	// · · Case: 1,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example214.go:1:13: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleStatementNonDecl_case12() {
	fmt.Println(exampleAST(215, "package a ; switch { } ;"))
	// Output:
	// &gc.StatementNonDecl{
	// · Case: 12,
	// · SwitchStatement: &gc.SwitchStatement{
	// · · SwitchBody: &gc.SwitchBody{
	// · · · Token: example215.go:1:20: '{',
	// · · · Token2: example215.go:1:22: '}',
	// · · },
	// · · Token: example215.go:1:13: SWITCH,
	// · },
	// }
}

func ExampleStructFieldDecl() {
	fmt.Println(exampleAST(216, "package a ; struct { * b ;"))
	// Output:
	// &gc.StructFieldDecl{
	// · QualifiedIdent: &gc.QualifiedIdent{
	// · · Token: example216.go:1:24: IDENTIFIER "b",
	// · },
	// · Token: example216.go:1:22: '*',
	// }
}

func ExampleStructFieldDecl_case1() {
	fmt.Println(exampleAST(217, "package a ; struct { b c ;"))
	// Output:
	// &gc.StructFieldDecl{
	// · Case: 1,
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example217.go:1:22: IDENTIFIER "b",
	// · },
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example217.go:1:24: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleStructFieldDecl_case2() {
	fmt.Println(exampleAST(218, "package a ; struct { b ;"))
	// Output:
	// &gc.StructFieldDecl{
	// · Case: 2,
	// · QualifiedIdent: &gc.QualifiedIdent{
	// · · Token: example218.go:1:22: IDENTIFIER "b",
	// · },
	// }
}

func ExampleStructFieldDecl_case3() {
	fmt.Println(exampleAST(219, "package a ; struct { ( b ) ;"))
	// Output:
	// &gc.StructFieldDecl{
	// · Case: 3,
	// · QualifiedIdent: &gc.QualifiedIdent{
	// · · Token: example219.go:1:24: IDENTIFIER "b",
	// · },
	// · Token: example219.go:1:22: '(',
	// · Token2: example219.go:1:26: ')',
	// }
}

func ExampleStructFieldDecl_case4() {
	fmt.Println(exampleAST(220, "package a ; struct { ( * b ) ;"))
	// Output:
	// &gc.StructFieldDecl{
	// · Case: 4,
	// · QualifiedIdent: &gc.QualifiedIdent{
	// · · Token: example220.go:1:26: IDENTIFIER "b",
	// · },
	// · Token: example220.go:1:22: '(',
	// · Token2: example220.go:1:24: '*',
	// · Token3: example220.go:1:28: ')',
	// }
}

func ExampleStructFieldDecl_case5() {
	fmt.Println(exampleAST(221, "package a ; struct { * ( b ) ;"))
	// Output:
	// &gc.StructFieldDecl{
	// · Case: 5,
	// · QualifiedIdent: &gc.QualifiedIdent{
	// · · Token: example221.go:1:26: IDENTIFIER "b",
	// · },
	// · Token: example221.go:1:22: '*',
	// · Token2: example221.go:1:24: '(',
	// · Token3: example221.go:1:28: ')',
	// }
}

func ExampleStructFieldDeclList() {
	fmt.Println(exampleAST(222, "package a ; struct { b ;"))
	// Output:
	// &gc.StructFieldDeclList{
	// · StructFieldDecl: &gc.StructFieldDecl{
	// · · Case: 2,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example222.go:1:22: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleStructFieldDeclList_case1() {
	fmt.Println(exampleAST(223, "package a ; struct { b ; c ;"))
	// Output:
	// &gc.StructFieldDeclList{
	// · StructFieldDecl: &gc.StructFieldDecl{
	// · · Case: 2,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example223.go:1:22: IDENTIFIER "b",
	// · · },
	// · },
	// · StructFieldDeclList: &gc.StructFieldDeclList{
	// · · Case: 1,
	// · · StructFieldDecl: &gc.StructFieldDecl{
	// · · · Case: 2,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example223.go:1:26: IDENTIFIER "c",
	// · · · },
	// · · },
	// · · Token: example223.go:1:24: ';',
	// · },
	// }
}

func ExampleStructType() {
	fmt.Println(exampleAST(224, "package a ; struct { } ("))
	// Output:
	// &gc.StructType{
	// · LBrace: &gc.LBrace{
	// · · Case: 1,
	// · · Token: example224.go:1:20: '{',
	// · },
	// · Token: example224.go:1:13: STRUCT,
	// · Token2: example224.go:1:22: '}',
	// }
}

func ExampleStructType_case1() {
	fmt.Println(exampleAST(226, "package a ; struct { b } ("))
	// Output:
	// &gc.StructType{
	// · Case: 1,
	// · LBrace: &gc.LBrace{
	// · · Case: 1,
	// · · Token: example226.go:1:20: '{',
	// · },
	// · StructFieldDeclList: &gc.StructFieldDeclList{
	// · · StructFieldDecl: &gc.StructFieldDecl{
	// · · · Case: 2,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example226.go:1:22: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// · Token: example226.go:1:13: STRUCT,
	// · Token2: example226.go:1:24: '}',
	// }
}

func ExampleSwitchBody() {
	fmt.Println(exampleAST(227, "package a ; switch { } ;"))
	// Output:
	// &gc.SwitchBody{
	// · Token: example227.go:1:20: '{',
	// · Token2: example227.go:1:22: '}',
	// }
}

func ExampleSwitchBody_case1() {
	fmt.Println(exampleAST(229, "package a ; switch { default : } ;"))
	// Output:
	// &gc.SwitchBody{
	// · Case: 1,
	// · SwitchCaseList: &gc.SwitchCaseList{
	// · · SwitchCaseBlock: &gc.SwitchCaseBlock{
	// · · · SwitchCase: &gc.SwitchCase{
	// · · · · Case: 3,
	// · · · · Token: example229.go:1:22: DEFAULT,
	// · · · · Token2: example229.go:1:30: ':',
	// · · · },
	// · · },
	// · },
	// · Token: example229.go:1:20: '{',
	// · Token2: example229.go:1:32: '}',
	// }
}

func ExampleSwitchCase() {
	fmt.Println(exampleAST(230, "package a ; switch { case 'b' : !"))
	// Output:
	// &gc.SwitchCase{
	// · ArgumentList: &gc.ArgumentList{
	// · · Argument: &gc.Argument{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'b',
	// · · · · · · · · Token: example230.go:1:27: CHAR_LIT "'b'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example230.go:1:22: CASE,
	// · Token2: example230.go:1:31: ':',
	// }
}

func ExampleSwitchCase_case1() {
	fmt.Println(exampleAST(231, "package a ; switch { case 'b' = 'c' : !"))
	// Output:
	// &gc.SwitchCase{
	// · ArgumentList: &gc.ArgumentList{
	// · · Argument: &gc.Argument{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'b',
	// · · · · · · · · Token: example231.go:1:27: CHAR_LIT "'b'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Case: 1,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example231.go:1:33: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example231.go:1:22: CASE,
	// · Token2: example231.go:1:31: '=',
	// · Token3: example231.go:1:37: ':',
	// }
}

func ExampleSwitchCase_case2() {
	fmt.Println(exampleAST(232, "package a ; switch { case 'b' := 'c' : !"))
	// Output:
	// &gc.SwitchCase{
	// · ArgumentList: &gc.ArgumentList{
	// · · Argument: &gc.Argument{
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · · Value: 'b',
	// · · · · · · · · Token: example232.go:1:27: CHAR_LIT "'b'",
	// · · · · · · · },
	// · · · · · · · Case: 2,
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Case: 2,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'c',
	// · · · · · · Token: example232.go:1:34: CHAR_LIT "'c'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example232.go:1:22: CASE,
	// · Token2: example232.go:1:31: COLAS,
	// · Token3: example232.go:1:38: ':',
	// }
}

func ExampleSwitchCase_case3() {
	fmt.Println(exampleAST(233, "package a ; switch { default : !"))
	// Output:
	// &gc.SwitchCase{
	// · Case: 3,
	// · Token: example233.go:1:22: DEFAULT,
	// · Token2: example233.go:1:30: ':',
	// }
}

func ExampleSwitchCaseBlock() {
	fmt.Println(exampleAST(236, "package a ; switch { default : }"))
	// Output:
	// &gc.SwitchCaseBlock{
	// · SwitchCase: &gc.SwitchCase{
	// · · Case: 3,
	// · · Token: example236.go:1:22: DEFAULT,
	// · · Token2: example236.go:1:30: ':',
	// · },
	// }
}

func ExampleSwitchCaseList() {
	fmt.Println(exampleAST(237, "package a ; switch { default : }"))
	// Output:
	// &gc.SwitchCaseList{
	// · SwitchCaseBlock: &gc.SwitchCaseBlock{
	// · · SwitchCase: &gc.SwitchCase{
	// · · · Case: 3,
	// · · · Token: example237.go:1:22: DEFAULT,
	// · · · Token2: example237.go:1:30: ':',
	// · · },
	// · },
	// }
}

func ExampleSwitchCaseList_case1() {
	fmt.Println(exampleAST(238, "package a ; switch { default : default : }"))
	// Output:
	// &gc.SwitchCaseList{
	// · SwitchCaseBlock: &gc.SwitchCaseBlock{
	// · · SwitchCase: &gc.SwitchCase{
	// · · · Case: 3,
	// · · · Token: example238.go:1:22: DEFAULT,
	// · · · Token2: example238.go:1:30: ':',
	// · · },
	// · },
	// · SwitchCaseList: &gc.SwitchCaseList{
	// · · Case: 1,
	// · · SwitchCaseBlock: &gc.SwitchCaseBlock{
	// · · · SwitchCase: &gc.SwitchCase{
	// · · · · Case: 3,
	// · · · · Token: example238.go:1:32: DEFAULT,
	// · · · · Token2: example238.go:1:40: ':',
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSwitchHeader() {
	fmt.Println(exampleAST(239, "package a ; switch b {"))
	// Output:
	// &gc.SwitchHeader{
	// · SimpleStatementOpt: &gc.SimpleStatementOpt{
	// · · SimpleStatement: &gc.SimpleStatement{
	// · · · Case: 1,
	// · · · Expression: &gc.Expression{
	// · · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · · Case: 7,
	// · · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · · Operand: &gc.Operand{
	// · · · · · · · Case: 4,
	// · · · · · · · Token: example239.go:1:20: IDENTIFIER "b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSwitchHeader_case1() {
	fmt.Println(exampleAST(240, "package a ; switch ; {"))
	// Output:
	// &gc.SwitchHeader{
	// · Case: 1,
	// · Token: example240.go:1:20: ';',
	// }
}

func ExampleSwitchHeader_case2() {
	fmt.Println(exampleAST(241, "package a ; switch ; 'b' {"))
	// Output:
	// &gc.SwitchHeader{
	// · Case: 2,
	// · Expression: &gc.Expression{
	// · · UnaryExpression: &gc.UnaryExpression{
	// · · · Case: 7,
	// · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · Operand: &gc.Operand{
	// · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · Value: 'b',
	// · · · · · · Token: example241.go:1:22: CHAR_LIT "'b'",
	// · · · · · },
	// · · · · · Case: 2,
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example241.go:1:20: ';',
	// }
}

func ExampleSwitchHeader_case3() {
	fmt.Println(exampleAST(242, "package a ; switch ; b := 'c' . ( type ) {"))
	// Output:
	// &gc.SwitchHeader{
	// · Case: 3,
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'c',
	// · · · · Token: example242.go:1:27: CHAR_LIT "'c'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// · Token: example242.go:1:20: ';',
	// · Token2: example242.go:1:22: IDENTIFIER "b",
	// · Token3: example242.go:1:24: COLAS,
	// · Token4: example242.go:1:31: '.',
	// · Token5: example242.go:1:33: '(',
	// · Token6: example242.go:1:35: TYPE,
	// · Token7: example242.go:1:40: ')',
	// }
}

func ExampleSwitchStatement() {
	fmt.Println(exampleAST(244, "package a ; switch { } ;"))
	// Output:
	// &gc.SwitchStatement{
	// · SwitchBody: &gc.SwitchBody{
	// · · Token: example244.go:1:20: '{',
	// · · Token2: example244.go:1:22: '}',
	// · },
	// · Token: example244.go:1:13: SWITCH,
	// }
}

func ExampleTagOpt() {
	fmt.Println(exampleAST(245, "package a ; struct { b ;") == (*TagOpt)(nil))
	// Output:
	// true
}

func ExampleTagOpt_case1() {
	fmt.Println(exampleAST(246, "package a ; struct { b \"c\" ;"))
	// Output:
	// &gc.TagOpt{
	// · Token: example246.go:1:24: STRING_LIT "\"c\"",
	// }
}

func ExampleTopLevelDecl() {
	fmt.Println(exampleAST(247, "package a ; const b ;"))
	// Output:
	// &gc.TopLevelDecl{
	// · ConstDecl: &gc.ConstDecl{
	// · · Case: 2,
	// · · ConstSpec: &gc.ConstSpec{
	// · · · IdentifierList: &gc.IdentifierList{
	// · · · · Token: example247.go:1:19: IDENTIFIER "b",
	// · · · },
	// · · },
	// · · Token: example247.go:1:13: CONST,
	// · },
	// }
}

func ExampleTopLevelDecl_case1() {
	fmt.Println(exampleAST(248, "package a ; func b ( ) ;"))
	// Output:
	// &gc.TopLevelDecl{
	// · Case: 1,
	// · FuncDecl: &gc.FuncDecl{
	// · · Signature: &gc.Signature{
	// · · · Parameters: &gc.Parameters{
	// · · · · Token: example248.go:1:20: '(',
	// · · · · Token2: example248.go:1:22: ')',
	// · · · },
	// · · },
	// · · Token: example248.go:1:13: FUNC,
	// · · Token2: example248.go:1:18: IDENTIFIER "b",
	// · },
	// }
}

func ExampleTopLevelDecl_case2() {
	fmt.Println(exampleAST(249, "package a ; type ( ) ;"))
	// Output:
	// &gc.TopLevelDecl{
	// · Case: 2,
	// · TypeDecl: &gc.TypeDecl{
	// · · Token: example249.go:1:13: TYPE,
	// · · Token2: example249.go:1:18: '(',
	// · · Token3: example249.go:1:20: ')',
	// · },
	// }
}

func ExampleTopLevelDecl_case3() {
	fmt.Println(exampleAST(250, "package a ; var ( ) ;"))
	// Output:
	// &gc.TopLevelDecl{
	// · Case: 3,
	// · VarDecl: &gc.VarDecl{
	// · · Token: example250.go:1:13: VAR,
	// · · Token2: example250.go:1:17: '(',
	// · · Token3: example250.go:1:19: ')',
	// · },
	// }
}

func ExampleTopLevelDecl_case4() {
	fmt.Println(exampleAST(251, "package a ; break ;"))
	// Output:
	// &gc.TopLevelDecl{
	// · Case: 4,
	// · StatementNonDecl: &gc.StatementNonDecl{
	// · · Token: example251.go:1:13: BREAK,
	// · },
	// }
}

func ExampleTopLevelDeclList() {
	fmt.Println(exampleAST(253, "package a ;") == (*TopLevelDeclList)(nil))
	// Output:
	// true
}

func ExampleTopLevelDeclList_case1() {
	fmt.Println(exampleAST(254, "package a ; break ;"))
	// Output:
	// &gc.TopLevelDeclList{
	// · Token: example254.go:1:19: ';',
	// · TopLevelDecl: &gc.TopLevelDecl{
	// · · Case: 4,
	// · · StatementNonDecl: &gc.StatementNonDecl{
	// · · · Token: example254.go:1:13: BREAK,
	// · · },
	// · },
	// }
}

func ExampleTyp() {
	fmt.Println(exampleAST(255, "package a ; chan ( b ) ("))
	// Output:
	// &gc.Typ{
	// · Token: example255.go:1:18: '(',
	// · Token2: example255.go:1:22: ')',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example255.go:1:20: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleTyp_case01() {
	fmt.Println(exampleAST(256, "package a ; chan * b ("))
	// Output:
	// &gc.Typ{
	// · Case: 1,
	// · Token: example256.go:1:18: '*',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example256.go:1:20: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleTyp_case02() {
	fmt.Println(exampleAST(257, "package a ; chan [ 'b' ] c ("))
	// Output:
	// &gc.Typ{
	// · ArrayType: &gc.ArrayType{
	// · · Case: 1,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example257.go:1:20: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example257.go:1:18: '[',
	// · · Token2: example257.go:1:24: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example257.go:1:26: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// · Case: 2,
	// }
}

func ExampleTyp_case03() {
	fmt.Println(exampleAST(258, "package a ; chan chan b ("))
	// Output:
	// &gc.Typ{
	// · Case: 3,
	// · ChanType: &gc.ChanType{
	// · · Token: example258.go:1:18: CHAN,
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example258.go:1:23: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTyp_case04() {
	fmt.Println(exampleAST(259, "package a ; var b func ( )"))
	// Output:
	// &gc.Typ{
	// · Case: 4,
	// · FuncType: &gc.FuncType{
	// · · Signature: &gc.Signature{
	// · · · Parameters: &gc.Parameters{
	// · · · · Token: example259.go:1:24: '(',
	// · · · · Token2: example259.go:1:26: ')',
	// · · · },
	// · · },
	// · · Token: example259.go:1:19: FUNC,
	// · },
	// }
}

func ExampleTyp_case05() {
	fmt.Println(exampleAST(260, "package a ; chan interface { } ("))
	// Output:
	// &gc.Typ{
	// · Case: 5,
	// · InterfaceType: &gc.InterfaceType{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example260.go:1:28: '{',
	// · · },
	// · · Token: example260.go:1:18: INTERFACE,
	// · · Token2: example260.go:1:30: '}',
	// · },
	// }
}

func ExampleTyp_case06() {
	fmt.Println(exampleAST(261, "package a ; chan map [ b ] c ("))
	// Output:
	// &gc.Typ{
	// · Case: 6,
	// · MapType: &gc.MapType{
	// · · Token: example261.go:1:18: MAP,
	// · · Token2: example261.go:1:22: '[',
	// · · Token3: example261.go:1:26: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example261.go:1:24: IDENTIFIER "b",
	// · · · },
	// · · },
	// · · Typ2: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example261.go:1:28: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTyp_case07() {
	fmt.Println(exampleAST(262, "package a ; chan b ("))
	// Output:
	// &gc.Typ{
	// · Case: 7,
	// · QualifiedIdent: &gc.QualifiedIdent{
	// · · Token: example262.go:1:18: IDENTIFIER "b",
	// · },
	// }
}

func ExampleTyp_case08() {
	fmt.Println(exampleAST(263, "package a ; chan [ ] b ("))
	// Output:
	// &gc.Typ{
	// · Case: 8,
	// · SliceType: &gc.SliceType{
	// · · Token: example263.go:1:18: '[',
	// · · Token2: example263.go:1:20: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example263.go:1:22: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTyp_case09() {
	fmt.Println(exampleAST(264, "package a ; chan struct { } ("))
	// Output:
	// &gc.Typ{
	// · Case: 9,
	// · StructType: &gc.StructType{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example264.go:1:25: '{',
	// · · },
	// · · Token: example264.go:1:18: STRUCT,
	// · · Token2: example264.go:1:27: '}',
	// · },
	// }
}

func ExampleTypeDecl() {
	fmt.Println(exampleAST(265, "package a ; type ( ) ;"))
	// Output:
	// &gc.TypeDecl{
	// · Token: example265.go:1:13: TYPE,
	// · Token2: example265.go:1:18: '(',
	// · Token3: example265.go:1:20: ')',
	// }
}

func ExampleTypeDecl_case1() {
	fmt.Println(exampleAST(266, "package a ; type ( b c ) ;"))
	// Output:
	// &gc.TypeDecl{
	// · Case: 1,
	// · Token: example266.go:1:13: TYPE,
	// · Token2: example266.go:1:18: '(',
	// · Token3: example266.go:1:24: ')',
	// · TypeSpecList: &gc.TypeSpecList{
	// · · TypeSpec: &gc.TypeSpec{
	// · · · Token: example266.go:1:20: IDENTIFIER "b",
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example266.go:1:22: IDENTIFIER "c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTypeDecl_case2() {
	fmt.Println(exampleAST(267, "package a ; type b c ;"))
	// Output:
	// &gc.TypeDecl{
	// · Case: 2,
	// · Token: example267.go:1:13: TYPE,
	// · TypeSpec: &gc.TypeSpec{
	// · · Token: example267.go:1:18: IDENTIFIER "b",
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example267.go:1:20: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTypeList() {
	fmt.Println(exampleAST(268, "package a ; b « c ,"))
	// Output:
	// &gc.TypeList{
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example268.go:1:18: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleTypeList_case1() {
	fmt.Println(exampleAST(269, "package a ; b « c , d ,"))
	// Output:
	// &gc.TypeList{
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example269.go:1:18: IDENTIFIER "c",
	// · · },
	// · },
	// · TypeList: &gc.TypeList{
	// · · Case: 1,
	// · · Token: example269.go:1:20: ',',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example269.go:1:22: IDENTIFIER "d",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTypeLiteral() {
	fmt.Println(exampleAST(270, "package a ; * chan b )"))
	// Output:
	// &gc.TypeLiteral{
	// · Token: example270.go:1:13: '*',
	// · TypeLiteral: &gc.TypeLiteral{
	// · · Case: 2,
	// · · ChanType: &gc.ChanType{
	// · · · Token: example270.go:1:15: CHAN,
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example270.go:1:20: IDENTIFIER "b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTypeLiteral_case1() {
	fmt.Println(exampleAST(271, "package a ; [ 'b' ] c ("))
	// Output:
	// &gc.TypeLiteral{
	// · ArrayType: &gc.ArrayType{
	// · · Case: 1,
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'b',
	// · · · · · · · Token: example271.go:1:15: CHAR_LIT "'b'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example271.go:1:13: '[',
	// · · Token2: example271.go:1:19: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example271.go:1:21: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// · Case: 1,
	// }
}

func ExampleTypeLiteral_case2() {
	fmt.Println(exampleAST(272, "package a ; chan b ("))
	// Output:
	// &gc.TypeLiteral{
	// · Case: 2,
	// · ChanType: &gc.ChanType{
	// · · Token: example272.go:1:13: CHAN,
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example272.go:1:18: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTypeLiteral_case3() {
	fmt.Println(exampleAST(273, "package a ; b(func())"))
	// Output:
	// &gc.TypeLiteral{
	// · Case: 3,
	// · FuncType: &gc.FuncType{
	// · · Signature: &gc.Signature{
	// · · · Parameters: &gc.Parameters{
	// · · · · Token: example273.go:1:19: '(',
	// · · · · Token2: example273.go:1:20: ')',
	// · · · },
	// · · },
	// · · Token: example273.go:1:15: FUNC,
	// · },
	// }
}

func ExampleTypeLiteral_case4() {
	fmt.Println(exampleAST(274, "package a ; interface { } ("))
	// Output:
	// &gc.TypeLiteral{
	// · Case: 4,
	// · InterfaceType: &gc.InterfaceType{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example274.go:1:23: '{',
	// · · },
	// · · Token: example274.go:1:13: INTERFACE,
	// · · Token2: example274.go:1:25: '}',
	// · },
	// }
}

func ExampleTypeLiteral_case5() {
	fmt.Println(exampleAST(275, "package a ; map [ b ] c ("))
	// Output:
	// &gc.TypeLiteral{
	// · Case: 5,
	// · MapType: &gc.MapType{
	// · · Token: example275.go:1:13: MAP,
	// · · Token2: example275.go:1:17: '[',
	// · · Token3: example275.go:1:21: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example275.go:1:19: IDENTIFIER "b",
	// · · · },
	// · · },
	// · · Typ2: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example275.go:1:23: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTypeLiteral_case6() {
	fmt.Println(exampleAST(276, "package a ; [ ] b ("))
	// Output:
	// &gc.TypeLiteral{
	// · Case: 6,
	// · SliceType: &gc.SliceType{
	// · · Token: example276.go:1:13: '[',
	// · · Token2: example276.go:1:15: ']',
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example276.go:1:17: IDENTIFIER "b",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTypeLiteral_case7() {
	fmt.Println(exampleAST(277, "package a ; struct { } ("))
	// Output:
	// &gc.TypeLiteral{
	// · Case: 7,
	// · StructType: &gc.StructType{
	// · · LBrace: &gc.LBrace{
	// · · · Case: 1,
	// · · · Token: example277.go:1:20: '{',
	// · · },
	// · · Token: example277.go:1:13: STRUCT,
	// · · Token2: example277.go:1:22: '}',
	// · },
	// }
}

func ExampleTypeSpec() {
	fmt.Println(exampleAST(278, "package a ; type b c )"))
	// Output:
	// &gc.TypeSpec{
	// · Token: example278.go:1:18: IDENTIFIER "b",
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example278.go:1:20: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleTypeSpecList() {
	fmt.Println(exampleAST(279, "package a ; type ( b c )"))
	// Output:
	// &gc.TypeSpecList{
	// · TypeSpec: &gc.TypeSpec{
	// · · Token: example279.go:1:20: IDENTIFIER "b",
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example279.go:1:22: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTypeSpecList_case1() {
	fmt.Println(exampleAST(280, "package a ; type ( b c ; d e )"))
	// Output:
	// &gc.TypeSpecList{
	// · TypeSpec: &gc.TypeSpec{
	// · · Token: example280.go:1:20: IDENTIFIER "b",
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example280.go:1:22: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// · TypeSpecList: &gc.TypeSpecList{
	// · · Case: 1,
	// · · Token: example280.go:1:24: ';',
	// · · TypeSpec: &gc.TypeSpec{
	// · · · Token: example280.go:1:26: IDENTIFIER "d",
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example280.go:1:28: IDENTIFIER "e",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression() {
	fmt.Println(exampleAST(281, "package a ; ! 'b' %"))
	// Output:
	// &gc.UnaryExpression{
	// · Token: example281.go:1:13: '!',
	// · UnaryExpression: &gc.UnaryExpression{
	// · · Case: 7,
	// · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · Operand: &gc.Operand{
	// · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · Value: 'b',
	// · · · · · Token: example281.go:1:15: CHAR_LIT "'b'",
	// · · · · },
	// · · · · Case: 2,
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case1() {
	fmt.Println(exampleAST(282, "package a ; & 'b' %"))
	// Output:
	// &gc.UnaryExpression{
	// · Case: 1,
	// · Token: example282.go:1:13: '&',
	// · UnaryExpression: &gc.UnaryExpression{
	// · · Case: 7,
	// · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · Operand: &gc.Operand{
	// · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · Value: 'b',
	// · · · · · Token: example282.go:1:15: CHAR_LIT "'b'",
	// · · · · },
	// · · · · Case: 2,
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case2() {
	fmt.Println(exampleAST(283, "package a ; * 'b' %"))
	// Output:
	// &gc.UnaryExpression{
	// · Case: 2,
	// · Token: example283.go:1:13: '*',
	// · UnaryExpression: &gc.UnaryExpression{
	// · · Case: 7,
	// · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · Operand: &gc.Operand{
	// · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · Value: 'b',
	// · · · · · Token: example283.go:1:15: CHAR_LIT "'b'",
	// · · · · },
	// · · · · Case: 2,
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case3() {
	fmt.Println(exampleAST(284, "package a ; + 'b' %"))
	// Output:
	// &gc.UnaryExpression{
	// · Case: 3,
	// · Token: example284.go:1:13: '+',
	// · UnaryExpression: &gc.UnaryExpression{
	// · · Case: 7,
	// · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · Operand: &gc.Operand{
	// · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · Value: 'b',
	// · · · · · Token: example284.go:1:15: CHAR_LIT "'b'",
	// · · · · },
	// · · · · Case: 2,
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case4() {
	fmt.Println(exampleAST(285, "package a ; - 'b' %"))
	// Output:
	// &gc.UnaryExpression{
	// · Case: 4,
	// · Token: example285.go:1:13: '-',
	// · UnaryExpression: &gc.UnaryExpression{
	// · · Case: 7,
	// · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · Operand: &gc.Operand{
	// · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · Value: 'b',
	// · · · · · Token: example285.go:1:15: CHAR_LIT "'b'",
	// · · · · },
	// · · · · Case: 2,
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case5() {
	fmt.Println(exampleAST(286, "package a ; ^ 'b' %"))
	// Output:
	// &gc.UnaryExpression{
	// · Case: 5,
	// · Token: example286.go:1:13: '^',
	// · UnaryExpression: &gc.UnaryExpression{
	// · · Case: 7,
	// · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · Operand: &gc.Operand{
	// · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · Value: 'b',
	// · · · · · Token: example286.go:1:15: CHAR_LIT "'b'",
	// · · · · },
	// · · · · Case: 2,
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case6() {
	fmt.Println(exampleAST(287, "package a ; <- 'b' %"))
	// Output:
	// &gc.UnaryExpression{
	// · Case: 6,
	// · Token: example287.go:1:13: COMM,
	// · UnaryExpression: &gc.UnaryExpression{
	// · · Case: 7,
	// · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · Operand: &gc.Operand{
	// · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · Value: 'b',
	// · · · · · Token: example287.go:1:16: CHAR_LIT "'b'",
	// · · · · },
	// · · · · Case: 2,
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case7() {
	fmt.Println(exampleAST(288, "package a ; 'b' %"))
	// Output:
	// &gc.UnaryExpression{
	// · Case: 7,
	// · PrimaryExpression: &gc.PrimaryExpression{
	// · · Operand: &gc.Operand{
	// · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · Value: 'b',
	// · · · · Token: example288.go:1:13: CHAR_LIT "'b'",
	// · · · },
	// · · · Case: 2,
	// · · },
	// · },
	// }
}

func ExampleVarDecl() {
	fmt.Println(exampleAST(289, "package a ; var ( ) ;"))
	// Output:
	// &gc.VarDecl{
	// · Token: example289.go:1:13: VAR,
	// · Token2: example289.go:1:17: '(',
	// · Token3: example289.go:1:19: ')',
	// }
}

func ExampleVarDecl_case1() {
	fmt.Println(exampleAST(290, "package a ; var ( b c ) ;"))
	// Output:
	// &gc.VarDecl{
	// · Case: 1,
	// · Token: example290.go:1:13: VAR,
	// · Token2: example290.go:1:17: '(',
	// · Token3: example290.go:1:23: ')',
	// · VarSpecList: &gc.VarSpecList{
	// · · VarSpec: &gc.VarSpec{
	// · · · Case: 1,
	// · · · IdentifierList: &gc.IdentifierList{
	// · · · · Token: example290.go:1:19: IDENTIFIER "b",
	// · · · },
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example290.go:1:21: IDENTIFIER "c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleVarDecl_case2() {
	fmt.Println(exampleAST(291, "package a ; var b c ;"))
	// Output:
	// &gc.VarDecl{
	// · Case: 2,
	// · Token: example291.go:1:13: VAR,
	// · VarSpec: &gc.VarSpec{
	// · · Case: 1,
	// · · IdentifierList: &gc.IdentifierList{
	// · · · Token: example291.go:1:17: IDENTIFIER "b",
	// · · },
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example291.go:1:19: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleVarSpec() {
	fmt.Println(exampleAST(292, "package a ; var b = 'c' )"))
	// Output:
	// &gc.VarSpec{
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'c',
	// · · · · · · · Token: example292.go:1:21: CHAR_LIT "'c'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example292.go:1:17: IDENTIFIER "b",
	// · },
	// · Token: example292.go:1:19: '=',
	// }
}

func ExampleVarSpec_case1() {
	fmt.Println(exampleAST(293, "package a ; var b c )"))
	// Output:
	// &gc.VarSpec{
	// · Case: 1,
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example293.go:1:17: IDENTIFIER "b",
	// · },
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example293.go:1:19: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleVarSpec_case2() {
	fmt.Println(exampleAST(294, "package a ; var b c = 'd' )"))
	// Output:
	// &gc.VarSpec{
	// · Case: 2,
	// · ExpressionList: &gc.ExpressionList{
	// · · Expression: &gc.Expression{
	// · · · UnaryExpression: &gc.UnaryExpression{
	// · · · · Case: 7,
	// · · · · PrimaryExpression: &gc.PrimaryExpression{
	// · · · · · Operand: &gc.Operand{
	// · · · · · · BasicLiteral: &gc.BasicLiteral{
	// · · · · · · · Value: 'd',
	// · · · · · · · Token: example294.go:1:23: CHAR_LIT "'d'",
	// · · · · · · },
	// · · · · · · Case: 2,
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · IdentifierList: &gc.IdentifierList{
	// · · Token: example294.go:1:17: IDENTIFIER "b",
	// · },
	// · Token: example294.go:1:21: '=',
	// · Typ: &gc.Typ{
	// · · Case: 7,
	// · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · Token: example294.go:1:19: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleVarSpecList() {
	fmt.Println(exampleAST(295, "package a ; var ( b c )"))
	// Output:
	// &gc.VarSpecList{
	// · VarSpec: &gc.VarSpec{
	// · · Case: 1,
	// · · IdentifierList: &gc.IdentifierList{
	// · · · Token: example295.go:1:19: IDENTIFIER "b",
	// · · },
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example295.go:1:21: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleVarSpecList_case1() {
	fmt.Println(exampleAST(296, "package a ; var ( b c ; d e )"))
	// Output:
	// &gc.VarSpecList{
	// · VarSpec: &gc.VarSpec{
	// · · Case: 1,
	// · · IdentifierList: &gc.IdentifierList{
	// · · · Token: example296.go:1:19: IDENTIFIER "b",
	// · · },
	// · · Typ: &gc.Typ{
	// · · · Case: 7,
	// · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · Token: example296.go:1:21: IDENTIFIER "c",
	// · · · },
	// · · },
	// · },
	// · VarSpecList: &gc.VarSpecList{
	// · · Case: 1,
	// · · Token: example296.go:1:23: ';',
	// · · VarSpec: &gc.VarSpec{
	// · · · Case: 1,
	// · · · IdentifierList: &gc.IdentifierList{
	// · · · · Token: example296.go:1:25: IDENTIFIER "d",
	// · · · },
	// · · · Typ: &gc.Typ{
	// · · · · Case: 7,
	// · · · · QualifiedIdent: &gc.QualifiedIdent{
	// · · · · · Token: example296.go:1:27: IDENTIFIER "e",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}
